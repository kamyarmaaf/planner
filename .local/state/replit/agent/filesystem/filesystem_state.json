{"file_contents":{"design_guidelines.md":{"content":"# Design Guidelines for AI-Powered Life Planning Web Application\n\n## Design Approach\n**Reference-Based Approach** inspired by **Notion** and **Linear** - focusing on clean productivity interfaces with thoughtful information hierarchy and gentle visual feedback.\n\n## Core Design Elements\n\n### Color Palette\n**Light Mode:**\n- Primary: 220 15% 25% (Deep blue-gray for headers, navigation)\n- Background: 0 0% 98% (Warm white)\n- Surface: 0 0% 100% (Pure white cards/panels)\n- Text Primary: 220 15% 20%\n- Text Secondary: 220 10% 50%\n\n**Dark Mode:**\n- Primary: 220 15% 85% (Light blue-gray)\n- Background: 220 15% 8% (Deep blue-black)\n- Surface: 220 15% 12% (Elevated dark panels)\n- Text Primary: 220 15% 90%\n- Text Secondary: 220 10% 70%\n\n**Accent Colors:**\n- Success: 142 70% 45% (Forest green for completed goals)\n- Warning: 38 85% 55% (Amber for pending items)\n- Accent: 260 85% 65% (Purple for AI-generated content)\n\n### Typography\n- **Primary Font:** Inter (Google Fonts) - for body text and UI elements\n- **Display Font:** Inter (600-700 weight) - for headings and emphasis\n- **Monospace:** JetBrains Mono - for time displays and data metrics\n\n### Layout System\n**Tailwind Spacing Units:** Primary spacing using units 2, 4, 6, 8, 12, 16\n- Tight spacing: p-2, m-2 (8px)\n- Standard spacing: p-4, m-4 (16px)\n- Section spacing: p-8, m-8 (32px)\n- Large gaps: gap-12, mt-16 (48-64px)\n\n### Component Library\n\n**Navigation:**\n- Clean sidebar navigation with collapsible sections\n- Breadcrumb trails for deep navigation\n- Tab-based interfaces for schedule views (daily/monthly)\n\n**Data Displays:**\n- Card-based layout for schedule items and goals\n- Progress bars with smooth animations\n- Calendar grid components with hover states\n- Chart components using Chart.js or similar\n\n**Forms:**\n- Multi-step profile setup with progress indicators\n- Inline editing for schedule adjustments\n- Toggle switches for preference settings\n- Floating labels for input fields\n\n**Interactive Elements:**\n- Drag-and-drop schedule reordering\n- Expandable/collapsible sections\n- Modal overlays for detailed editing\n- Toast notifications for AI recommendations\n\n### Key Pages Layout\n\n**Dashboard:**\n- Three-column layout: navigation, main content, sidebar widgets\n- Today's schedule as primary focus\n- Quick stats cards showing progress metrics\n- AI suggestions panel with gentle purple accent\n\n**Profile Setup:**\n- Progressive disclosure multi-step form\n- Visual progress indicator at top\n- Clear section divisions with generous whitespace\n- Smart defaults and helpful tooltips\n\n**Schedule Views:**\n- Timeline-based daily view with time blocks\n- Calendar grid for monthly overview\n- Split view: planned vs actual comparison\n- Floating action button for quick additions\n\n### Visual Treatments\n- **Elevation:** Subtle shadows (0 1px 3px rgba(0,0,0,0.1))\n- **Borders:** Minimal 1px borders in muted colors\n- **Radius:** Consistent 6px border radius for cards, 4px for buttons\n- **Transitions:** 150ms ease-in-out for hover states\n- **Focus States:** 2px outline with primary color\n\n### Content Strategy\n- **Onboarding:** Progressive disclosure of features\n- **Empty States:** Encouraging illustrations with clear next steps\n- **AI Feedback:** Clearly labeled AI-generated content with explanation\n- **Error Handling:** Friendly, actionable error messages\n\n### Accessibility\n- Consistent dark mode across all form inputs\n- High contrast ratios (4.5:1 minimum)\n- Keyboard navigation support\n- Screen reader friendly labels\n- Focus indicators on all interactive elements\n\nThis design emphasizes clarity, productivity, and trust - essential for a personal planning application where users input sensitive life data and rely on AI recommendations.","size_bytes":3708},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"sqlite\",\n  dbCredentials: {\n    url: \"./database.sqlite\",\n  },\n});\n","size_bytes":209},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcrypt';\nimport { type Request, Response, NextFunction } from 'express';\nimport { storage } from './storage';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\nconst JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || 'your-refresh-secret-key';\nconst ACCESS_TOKEN_EXPIRES_IN = '15m';\nconst REFRESH_TOKEN_EXPIRES_IN = '7d';\n\n// Store blacklisted refresh tokens (in production, use Redis or database)\nconst blacklistedTokens = new Set<string>();\n\nexport interface AuthRequest extends Request {\n  user?: {\n    id: number;\n    email: string;\n    name: string;\n  };\n}\n\nexport const hashPassword = async (password: string): Promise<string> => {\n  return bcrypt.hash(password, 10);\n};\n\nexport const comparePassword = async (password: string, hashedPassword: string): Promise<boolean> => {\n  return bcrypt.compare(password, hashedPassword);\n};\n\nexport const generateTokens = (user: { id: number; email: string; name: string }) => {\n  const accessToken = jwt.sign(\n    { id: user.id, email: user.email, name: user.name },\n    JWT_SECRET,\n    { expiresIn: ACCESS_TOKEN_EXPIRES_IN }\n  );\n\n  const refreshToken = jwt.sign(\n    { id: user.id, email: user.email },\n    JWT_REFRESH_SECRET,\n    { expiresIn: REFRESH_TOKEN_EXPIRES_IN }\n  );\n\n  return { accessToken, refreshToken };\n};\n\nexport const verifyAccessToken = (token: string) => {\n  return jwt.verify(token, JWT_SECRET) as { id: number; email: string; name: string };\n};\n\nexport const verifyRefreshToken = (token: string) => {\n  return jwt.verify(token, JWT_REFRESH_SECRET) as { id: number; email: string };\n};\n\nexport const blacklistRefreshToken = (token: string) => {\n  blacklistedTokens.add(token);\n};\n\nexport const isRefreshTokenBlacklisted = (token: string): boolean => {\n  return blacklistedTokens.has(token);\n};\n\nexport const authenticateToken = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  try {\n    const decoded = verifyAccessToken(token);\n    const user = await storage.getUser(decoded.id);\n    \n    if (!user) {\n      return res.status(401).json({ message: 'User not found' });\n    }\n\n    req.user = {\n      id: user.id,\n      email: user.email,\n      name: user.name\n    };\n    \n    next();\n  } catch (error) {\n    return res.status(403).json({ message: 'Invalid or expired token' });\n  }\n};\n","size_bytes":2539},"server/db.ts":{"content":"import Database from 'better-sqlite3';\nimport { drizzle } from 'drizzle-orm/better-sqlite3';\nimport * as schema from \"@shared/schema\";\n\nconst sqlite = new Database('./database.sqlite');\nexport const db = drizzle(sqlite, { schema });\n","size_bytes":233},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\n// Middleware برای JSON و URL-encoded\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Middleware برای لاگ کردن درخواست‌ها\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Middleware خطا\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // فقط در حالت توسعه Vite ستاپ شود\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // تنظیم host و پورت برای ویندوز و لینوکس\n  const port = process.env.PORT || '5000';\n  const host = \"0.0.0.0\";\n\n  server.listen({\n    port,\n    host,\n    reusePort: true,\n  }, () => {\n    log(`Server running at http://${host}:${port}`);\n  });\n})();\n","size_bytes":1936},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  hashPassword, \n  comparePassword, \n  generateTokens, \n  verifyRefreshToken, \n  blacklistRefreshToken, \n  isRefreshTokenBlacklisted,\n  type AuthRequest \n} from \"./auth\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport profileRoutes from \"./routes/profile\";\nimport planRoutes from \"./routes/plan\";\nimport aiRoutes from \"./routes/ai\";\nimport contactRoutes from \"./routes/contact\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Initialize database tables\n  await initializeDatabase();\n\n  // Mount API routes\n  app.use('/api/profile', profileRoutes);\n  app.use('/api/plan', planRoutes);\n  app.use('/api/ai', aiRoutes);\n  app.use('/api/contact', contactRoutes);\n\n  // Auth routes\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const { name, email, password } = req.body;\n\n      // Validate input\n      const validation = insertUserSchema.safeParse({ name, email, password });\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: 'Invalid input', \n          errors: validation.error.errors \n        });\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(409).json({ message: 'User with this email already exists' });\n      }\n\n      // Hash password and create user\n      const hashedPassword = await hashPassword(password);\n      const user = await storage.createUser({\n        name,\n        email,\n        password: hashedPassword\n      });\n\n      // Generate tokens\n      const { accessToken, refreshToken } = generateTokens({\n        id: user.id,\n        email: user.email,\n        name: user.name\n      });\n\n      res.status(201).json({\n        message: 'User created successfully',\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email\n        },\n        accessToken,\n        refreshToken\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      if (!email || !password) {\n        return res.status(400).json({ message: 'Email and password are required' });\n      }\n\n      // Find user by email\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: 'Invalid email or password' });\n      }\n\n      // Verify password\n      const isValidPassword = await comparePassword(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: 'Invalid email or password' });\n      }\n\n      // Generate tokens\n      const { accessToken, refreshToken } = generateTokens({\n        id: user.id,\n        email: user.email,\n        name: user.name\n      });\n\n      res.json({\n        message: 'Login successful',\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email\n        },\n        accessToken,\n        refreshToken\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/auth/refresh', async (req, res) => {\n    try {\n      const { refreshToken } = req.body;\n\n      if (!refreshToken) {\n        return res.status(400).json({ message: 'Refresh token is required' });\n      }\n\n      // Check if token is blacklisted\n      if (isRefreshTokenBlacklisted(refreshToken)) {\n        return res.status(401).json({ message: 'Token has been invalidated' });\n      }\n\n      // Verify refresh token\n      const decoded = verifyRefreshToken(refreshToken);\n      const user = await storage.getUser(decoded.id);\n      \n      if (!user) {\n        return res.status(401).json({ message: 'User not found' });\n      }\n\n      // Generate new access token\n      const { accessToken } = generateTokens({\n        id: user.id,\n        email: user.email,\n        name: user.name\n      });\n\n      res.json({\n        message: 'Token refreshed successfully',\n        accessToken\n      });\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      res.status(401).json({ message: 'Invalid or expired refresh token' });\n    }\n  });\n\n  app.post('/api/auth/logout', async (req, res) => {\n    try {\n      const { refreshToken } = req.body;\n\n      if (!refreshToken) {\n        return res.status(400).json({ message: 'Refresh token is required' });\n      }\n\n      // Blacklist the refresh token\n      blacklistRefreshToken(refreshToken);\n\n      res.json({ message: 'Logout successful' });\n    } catch (error) {\n      console.error('Logout error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\nasync function initializeDatabase() {\n  // This will be handled by Drizzle migrations\n  // For now, we'll just ensure the database file exists\n  console.log('Database initialized');\n}\n","size_bytes":5228},"server/storage.ts":{"content":"import { type User, type InsertUser, type Profile, type InsertProfile, type DailyPlan, type InsertDailyPlan, type Message, type InsertMessage, users, profiles, dailyPlans, messages } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getProfile(userId: number): Promise<Profile | undefined>;\n  upsertProfile(profile: InsertProfile): Promise<Profile>;\n  getDailyPlan(userId: number, date: string): Promise<DailyPlan | undefined>;\n  upsertDailyPlan(plan: InsertDailyPlan): Promise<DailyPlan>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  getAllMessages(): Promise<Message[]>;\n}\n\nexport class DbStorage implements IStorage {\n  async getUser(id: number): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  async getProfile(userId: number): Promise<Profile | undefined> {\n    const result = await db.select().from(profiles).where(eq(profiles.userId, userId)).limit(1);\n    return result[0];\n  }\n\n  async upsertProfile(profile: InsertProfile): Promise<Profile> {\n    // Check if profile exists\n    const existing = await this.getProfile(profile.userId);\n    \n    if (existing) {\n      // Update existing profile\n      const result = await db.update(profiles)\n        .set({\n          ...profile,\n          updatedAt: new Date()\n        })\n        .where(eq(profiles.userId, profile.userId))\n        .returning();\n      return result[0];\n    } else {\n      // Create new profile\n      const result = await db.insert(profiles).values(profile).returning();\n      return result[0];\n    }\n  }\n\n  async getDailyPlan(userId: number, date: string): Promise<DailyPlan | undefined> {\n    const result = await db.select().from(dailyPlans)\n      .where(and(eq(dailyPlans.userId, userId), eq(dailyPlans.date, date)))\n      .limit(1);\n    return result[0];\n  }\n\n  async upsertDailyPlan(plan: InsertDailyPlan): Promise<DailyPlan> {\n    // Check if plan exists\n    const existing = await this.getDailyPlan(plan.userId, plan.date);\n    \n    if (existing) {\n      // Update existing plan\n      const result = await db.update(dailyPlans)\n        .set({\n          ...plan,\n          updatedAt: new Date()\n        })\n        .where(and(eq(dailyPlans.userId, plan.userId), eq(dailyPlans.date, plan.date)))\n        .returning();\n      return result[0];\n    } else {\n      // Create new plan\n      const result = await db.insert(dailyPlans).values(plan).returning();\n      return result[0];\n    }\n  }\n\n  async createMessage(message: InsertMessage): Promise<Message> {\n    const result = await db.insert(messages).values(message).returning();\n    return result[0];\n  }\n\n  async getAllMessages(): Promise<Message[]> {\n    const result = await db.select().from(messages).orderBy(messages.createdAt);\n    return result;\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":3408},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    // Skip API routes\n    if (url.startsWith(\"/api\")) {\n      return next();\n    }\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2348},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { sqliteTable, text, integer } from \"drizzle-orm/sqlite-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = sqliteTable(\"users\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const profiles = sqliteTable(\"profiles\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  userId: integer(\"user_id\").notNull().unique().references(() => users.id),\n  workStudy: text(\"work_study\").notNull(),\n  hobbies: text(\"hobbies\").notNull(),\n  sports: text(\"sports\").notNull(),\n  location: text(\"location\").notNull(),\n  weightKg: integer(\"weight_kg\"),\n  heightCm: integer(\"height_cm\"),\n  ageYears: integer(\"age_years\"),\n  reading: text(\"reading\"),\n  extraInformation: text(\"extra_information\"),\n  aiContext: text(\"ai_context\"),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }).default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const dailyPlans = sqliteTable(\"daily_plans\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  date: text(\"date\").notNull(),\n  timezone: text(\"timezone\").notNull(),\n  planJson: text(\"plan_json\").notNull(),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }).default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const messages = sqliteTable(\"messages\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  subject: text(\"subject\").notNull(),\n  category: text(\"category\").notNull(),\n  message: text(\"message\").notNull(),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  name: true,\n  email: true,\n  password: true,\n});\n\nexport const insertProfileSchema = createInsertSchema(profiles).pick({\n  userId: true,\n  workStudy: true,\n  hobbies: true,\n  sports: true,\n  location: true,\n  weightKg: true,\n  heightCm: true,\n  ageYears: true,\n  reading: true,\n  extraInformation: true,\n  aiContext: true,\n});\n\nexport const insertDailyPlanSchema = createInsertSchema(dailyPlans).pick({\n  userId: true,\n  date: true,\n  timezone: true,\n  planJson: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).pick({\n  name: true,\n  email: true,\n  subject: true,\n  category: true,\n  message: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertProfile = z.infer<typeof insertProfileSchema>;\nexport type Profile = typeof profiles.$inferSelect;\nexport type InsertDailyPlan = z.infer<typeof insertDailyPlanSchema>;\nexport type DailyPlan = typeof dailyPlans.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\n","size_bytes":3256},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\"\nimport { Switch, Route } from \"wouter\"\nimport { queryClient } from \"./lib/queryClient\"\nimport { QueryClientProvider } from \"@tanstack/react-query\"\nimport { Toaster } from \"@/components/ui/toaster\"\nimport { TooltipProvider } from \"@/components/ui/tooltip\"\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\"\nimport { ThemeProvider } from \"./components/ThemeProvider\"\nimport { ThemeToggle } from \"./components/ThemeToggle\"\nimport { LanguageProvider } from \"./contexts/LanguageContext\"\nimport { AuthProvider, useAuth } from \"./contexts/AuthContext\"\nimport { LanguageToggle } from \"./components/LanguageToggle\"\nimport { AppSidebar } from \"./components/AppSidebar\"\nimport { AuthForm } from \"./components/AuthForm\"\nimport { ProfileSetup } from \"./components/ProfileSetup\"\nimport { DailyDashboard } from \"./components/DailyDashboard\"\nimport { MonthlyPlanner } from \"./components/MonthlyPlanner\"\nimport { ProgressTracking } from \"./components/ProgressTracking\"\nimport { ContactForm } from \"./components/ContactForm\"\nimport NotFound from \"@/pages/not-found\"\n\ntype AppState = 'auth' | 'profile-setup' | 'app'\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={DailyDashboard} />\n      <Route path=\"/dashboard\" component={DailyDashboard} />\n      <Route path=\"/monthly\" component={MonthlyPlanner} />\n      <Route path=\"/progress\" component={ProgressTracking} />\n      <Route path=\"/goals\" component={MonthlyPlanner} />\n      <Route path=\"/contact\" component={ContactForm} />\n      <Route path=\"/settings\">\n        <div className=\"p-6\">\n          <h1 className=\"text-3xl font-bold mb-4\">Settings</h1>\n          <p className=\"text-muted-foreground\">Settings panel coming soon...</p>\n        </div>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  )\n}\n\nfunction AppContent() {\n  const { isAuthenticated, isLoading, user, login, logout } = useAuth();\n  const [appState, setAppState] = useState<AppState>('auth');\n  const [hasProfile, setHasProfile] = useState<boolean | null>(null);\n\n  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '/';\n\n  // Custom sidebar width for life planning application\n  const style = {\n    \"--sidebar-width\": \"20rem\",       // 320px for better content\n    \"--sidebar-width-icon\": \"4rem\",   // default icon width\n  }\n\n  // Check if user has a profile when authenticated\n  useEffect(() => {\n    const checkProfile = async () => {\n      if (isAuthenticated && user) {\n        try {\n          const accessToken = localStorage.getItem('accessToken');\n          const response = await fetch(`${API_BASE_URL}api/profile/me`, {\n            headers: {\n              'Authorization': `Bearer ${accessToken}`,\n            },\n          });\n          \n          if (response.ok) {\n            setHasProfile(true);\n            setAppState('app');\n          } else if (response.status === 404) {\n            setHasProfile(false);\n            setAppState('profile-setup');\n          } else {\n            // If there's an auth error, logout\n            logout();\n          }\n        } catch (error) {\n          console.error('Error checking profile:', error);\n          logout();\n        }\n      }\n    };\n\n    if (isAuthenticated) {\n      checkProfile();\n    } else {\n      setHasProfile(null);\n      setAppState('auth');\n    }\n  }, [isAuthenticated, user, logout]);\n\n  // Show loading spinner while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Handle authentication success\n  const handleAuthSuccess = (userData: any, accessToken: string, refreshToken: string) => {\n    login(userData, accessToken, refreshToken);\n  };\n\n  if (appState === 'auth') {\n    return <AuthForm onAuthSuccess={handleAuthSuccess} />\n  }\n\n  if (appState === 'profile-setup') {\n    return <ProfileSetup onComplete={() => setAppState('app')} />\n  }\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex flex-col flex-1\">\n          <header className=\"flex items-center justify-between p-4 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <div className=\"flex items-center gap-2\">\n              <LanguageToggle />\n              <ThemeToggle />\n            </div>\n          </header>\n          <main className=\"flex-1 overflow-auto\">\n            <div className=\"container mx-auto p-6\">\n              <Router />\n            </div>\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  )\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <LanguageProvider>\n        <AuthProvider>\n          <ThemeProvider defaultTheme=\"light\" storageKey=\"lifeplan-ui-theme\">\n            <TooltipProvider>\n              <AppContent />\n              <Toaster />\n            </TooltipProvider>\n          </ThemeProvider>\n        </AuthProvider>\n      </LanguageProvider>\n    </QueryClientProvider>\n  )\n}","size_bytes":5269},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n  --foreground: 220 15% 20%;\n  --border: 220 8% 85%;\n\n  --card: 0 0% 100%;\n  --card-foreground: 220 15% 20%;\n  --card-border: 220 8% 90%;\n\n  --sidebar: 220 8% 95%;\n  --sidebar-foreground: 220 15% 20%;\n  --sidebar-border: 220 8% 88%;\n  --sidebar-primary: 220 15% 25%;\n  --sidebar-primary-foreground: 0 0% 98%;\n  --sidebar-accent: 220 10% 92%;\n  --sidebar-accent-foreground: 220 15% 20%;\n  --sidebar-ring: 220 15% 25%;\n\n  --popover: 0 0% 99%;\n  --popover-foreground: 220 15% 20%;\n  --popover-border: 220 8% 87%;\n\n  --primary: 220 15% 25%;\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 8% 93%;\n  --secondary-foreground: 220 15% 20%;\n\n  --muted: 220 6% 96%;\n  --muted-foreground: 220 10% 50%;\n\n  --accent: 260 15% 94%;\n  --accent-foreground: 260 15% 25%;\n\n  --destructive: 0 65% 45%;\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 12% 75%;\n  --ring: 220 15% 25%;\n\n  --chart-1: 142 70% 35%;\n  --chart-2: 260 85% 55%;\n  --chart-3: 38 85% 45%;\n  --chart-4: 200 85% 45%;\n  --chart-5: 310 85% 45%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: .375rem; /* 6px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 25% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 25% / 0.10);\n  --shadow-sm: 0px 1px 2px 0px hsl(220 15% 25% / 0.05), 0px 1px 3px -1px hsl(220 15% 25% / 0.10);\n  --shadow: 0px 1px 3px 0px hsl(220 15% 25% / 0.10), 0px 1px 2px -1px hsl(220 15% 25% / 0.10);\n  --shadow-md: 0px 4px 6px -1px hsl(220 15% 25% / 0.10), 0px 2px 4px -1px hsl(220 15% 25% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 15% 25% / 0.10), 0px 4px 6px -2px hsl(220 15% 25% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 15% 25% / 0.10), 0px 10px 10px -5px hsl(220 15% 25% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 15% 25% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 8%;\n  --foreground: 220 15% 90%;\n  --border: 220 12% 18%;\n\n  --card: 220 15% 12%;\n  --card-foreground: 220 15% 90%;\n  --card-border: 220 12% 20%;\n\n  --sidebar: 220 12% 10%;\n  --sidebar-foreground: 220 15% 90%;\n  --sidebar-border: 220 12% 16%;\n  --sidebar-primary: 220 15% 85%;\n  --sidebar-primary-foreground: 220 15% 8%;\n  --sidebar-accent: 220 10% 15%;\n  --sidebar-accent-foreground: 220 15% 90%;\n  --sidebar-ring: 220 15% 85%;\n\n  --popover: 220 15% 14%;\n  --popover-foreground: 220 15% 90%;\n  --popover-border: 220 12% 22%;\n\n  --primary: 220 15% 25%;\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 8% 16%;\n  --secondary-foreground: 220 15% 90%;\n\n  --muted: 220 6% 13%;\n  --muted-foreground: 220 10% 70%;\n\n  --accent: 260 15% 15%;\n  --accent-foreground: 260 15% 85%;\n\n  --destructive: 0 65% 35%;\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 12% 25%;\n  --ring: 220 15% 85%;\n\n  --chart-1: 142 70% 65%;\n  --chart-2: 260 85% 75%;\n  --chart-3: 38 85% 65%;\n  --chart-4: 200 85% 65%;\n  --chart-5: 310 85% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.15);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.20);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.15), 0px 1px 3px -1px hsl(0 0% 0% / 0.20);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.20);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.20), 0px 2px 4px -1px hsl(0 0% 0% / 0.12);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.20), 0px 4px 6px -2px hsl(0 0% 0% / 0.10);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.20), 0px 10px 10px -5px hsl(0 0% 0% / 0.08);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.40);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* RTL Support for Persian */\n  html[dir=\"rtl\"] {\n    direction: rtl;\n  }\n\n  html[dir=\"rtl\"] .flex {\n    flex-direction: row-reverse;\n  }\n\n  html[dir=\"rtl\"] .space-x-2 > :not([hidden]) ~ :not([hidden]) {\n    --tw-space-x-reverse: 1;\n  }\n\n  html[dir=\"rtl\"] .ml-2 {\n    margin-left: 0;\n    margin-right: 0.5rem;\n  }\n\n  html[dir=\"rtl\"] .mr-2 {\n    margin-right: 0;\n    margin-left: 0.5rem;\n  }\n\n  html[dir=\"rtl\"] .pl-4 {\n    padding-left: 0;\n    padding-right: 1rem;\n  }\n\n  html[dir=\"rtl\"] .pr-4 {\n    padding-right: 0;\n    padding-left: 1rem;\n  }\n\n  html[dir=\"rtl\"] .text-left {\n    text-align: right;\n  }\n\n  html[dir=\"rtl\"] .text-right {\n    text-align: left;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10453},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/middleware/auth.ts":{"content":"import { type Request, Response, NextFunction } from 'express';\nimport { verifyAccessToken, type AuthRequest } from '../auth';\n\nexport const authenticateToken = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  try {\n    const decoded = verifyAccessToken(token);\n    req.user = {\n      id: decoded.id,\n      email: decoded.email,\n      name: decoded.name\n    };\n    \n    next();\n  } catch (error) {\n    return res.status(403).json({ message: 'Invalid or expired token' });\n  }\n};\n","size_bytes":697},"server/routes/ai.ts":{"content":"import { Router } from \"express\";\nimport { authenticateToken, type AuthRequest } from \"../middleware/auth\";\nimport { storage } from \"../storage\";\nimport { dailyPlans } from \"@shared/schema\";\nimport { db } from \"../db\";\nimport { and, eq } from \"drizzle-orm\";\n\nconst router = Router();\n\nrouter.post(\"/daily-tasks\", authenticateToken, async (req: AuthRequest, res) => {\n  try {\n    const userId = req.user!.id;\n    const profile = await storage.getProfile(userId);\n\n    if (!profile) {\n      return res.status(400).json({ message: \"Profile not found. Please complete your profile first.\" });\n    }\n\n    const apiKey = process.env.HF_API_KEY || process.env.HUGGINGFACE_API_KEY;\n    if (!apiKey) {\n      // Deterministic fallback if key missing\n      return res.json({\n        daily_tasks: [\n          { id: \"1\", title: \"Morning Workout\", time: \"07:00\", type: \"workout\", completed: false, description: \"20min jog + stretching\" },\n          { id: \"2\", title: \"Healthy Breakfast\", time: \"08:00\", type: \"meal\", completed: false, description: \"Oatmeal with berries\" },\n          { id: \"3\", title: \"Deep Work\", time: \"09:00\", type: \"work\", completed: false, description: \"Focus block on priority task\" },\n        ],\n      });\n    }\n\n    const prompt = `You are an intelligent health and productivity planner.  \nBased on user inputs (height, weight, age, goals, interests), generate a structured multi-layer plan:\n\n1. Roadmap (long-term: 3+ months) with monthly milestones.  \n2. Monthly Planner (weekly breakdowns for habit/skill focus).  \n3. Daily Planner (JSON list of daily tasks).  \n\nEach task in the Daily Planner must include:  \nid, title, time, type (workout, meal, reading, work, rest), description, and completed: false.  \n\nReturn only JSON in this format:\n{\n  \"roadmap\": { ... },\n  \"monthly_plans\": { ... },\n  \"daily_tasks\": [\n    {\n      \"id\": \"1\",\n      \"title\": \"Morning Workout\",\n      \"time\": \"07:00\",\n      \"type\": \"workout\",\n      \"completed\": false,\n      \"description\": \"30min cardio + stretching\"\n    }\n  ]\n}`;\n\n    const userContext = {\n      heightCm: profile.heightCm ?? null,\n      weightKg: profile.weightKg ?? null,\n      ageYears: profile.ageYears ?? null,\n      interests: profile.hobbies,\n      sports: profile.sports,\n      goals: profile.workStudy,\n      location: profile.location,\n      reading: profile.reading ?? \"\",\n    };\n\n    const response = await fetch(\"https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${apiKey}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        inputs: `[INST] Return ONLY valid JSON (no markdown, no prose). Use this instruction and user context to produce the response. ${prompt}\\n\\nUser context: ${JSON.stringify(userContext)} [/INST]`,\n        parameters: { max_new_tokens: 1200, temperature: 0.6 },\n      }),\n    });\n\n    if (!response.ok) {\n      const text = await response.text();\n      return res.status(502).json({ message: `DeepSeek error ${response.status}: ${text}` });\n    }\n\n    const data = await response.json();\n    let content: string = Array.isArray(data) ? (data[0]?.generated_text ?? \"\") : (data?.generated_text ?? \"\");\n    if (!content) {\n      return res.status(502).json({ message: \"Empty response from DeepSeek\" });\n    }\n\n    if (content.includes(\"```\")) {\n      content = content.replace(/```json\\n?/g, \"\").replace(/```\\n?/g, \"\");\n    }\n\n    const parsed = JSON.parse(content);\n\n    // Normalize times: keep AI-provided times; fill missing ones evenly across 24h\n    const rawList: any[] = Array.isArray(parsed?.daily_tasks) ? parsed.daily_tasks : [];\n    const total = rawList.length || 0;\n    const step = total > 0 ? Math.floor((24 * 60) / total) : 0;\n    const used: Set<string> = new Set();\n\n    const pad = (n: number) => (n < 10 ? `0${n}` : `${n}`);\n    const toStr = (mins: number) => `${pad(Math.floor(mins / 60) % 24)}:${pad(mins % 60)}`;\n\n    // Record already provided times (valid HH:MM)\n    rawList.forEach((t) => {\n      const time: string | undefined = t?.time && String(t.time);\n      if (time && /^\\d{2}:\\d{2}$/.test(time)) used.add(time);\n    });\n\n    // Assign missing times deterministically over 24h\n    let idx = 0;\n    const normalizedList = rawList.map((t, i) => {\n      let time: string | undefined = t?.time && String(t.time);\n      if (!time || !/^\\d{2}:\\d{2}$/.test(time)) {\n        let candidate = step > 0 ? (i * step) % (24 * 60) : 0;\n        let candidateStr = toStr(candidate);\n        // Avoid duplicates\n        let guard = 0;\n        while (used.has(candidateStr) && guard < 1440) {\n          candidate = (candidate + 1) % (24 * 60);\n          candidateStr = toStr(candidate);\n          guard++;\n        }\n        time = candidateStr;\n        used.add(time);\n      }\n      return { ...t, time };\n    });\n\n    // Persist to daily_plans for today\n    const date = new Date().toISOString().slice(0, 10);\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const planJson = JSON.stringify({ daily_tasks: normalizedList });\n\n    await storage.upsertDailyPlan({\n      userId,\n      date,\n      timezone,\n      planJson,\n    });\n\n    return res.json({ daily_tasks: normalizedList , date, timezone});\n  } catch (err: any) {\n    console.error(\"/api/ai/daily-tasks error\", err);\n    return res.status(500).json({ message: \"Failed to generate tasks\" });\n  }\n});\n\n// Toggle completion for a task and persist back into daily_plans JSON\nrouter.post(\"/daily-tasks/toggle\", authenticateToken, async (req: AuthRequest, res) => {\n  try {\n    const userId = req.user!.id;\n    const { date, id, completed } = req.body as { date: string; id: string; completed: boolean };\n\n    if (!date || !id || typeof completed !== \"boolean\") {\n      return res.status(400).json({ message: \"date, id and completed are required\" });\n    }\n\n    const existing = await storage.getDailyPlan(userId, date);\n    if (!existing) {\n      return res.status(404).json({ message: \"Plan not found for this date\" });\n    }\n\n    let json: any = {};\n    try { json = JSON.parse(existing.planJson); } catch {}\n\n    const list: any[] = Array.isArray(json.daily_tasks) ? json.daily_tasks : [];\n    const idx = list.findIndex(t => String(t.id) === String(id));\n    if (idx >= 0) {\n      list[idx].completed = completed;\n    }\n\n    const newJson = JSON.stringify({ ...json, daily_tasks: list });\n\n    await db.update(dailyPlans)\n      .set({ planJson: newJson })\n      .where(and(eq(dailyPlans.userId, userId), eq(dailyPlans.date, date)));\n\n    return res.json({ message: \"Task updated\", daily_tasks: list });\n  } catch (err) {\n    console.error(\"/api/ai/daily-tasks/toggle error\", err);\n    return res.status(500).json({ message: \"Failed to update task\" });\n  }\n});\n\nexport default router;\n\n\n","size_bytes":6818},"server/routes/contact.ts":{"content":"import { Router } from 'express';\nimport { z } from 'zod';\nimport { storage } from '../storage';\nimport { insertMessageSchema } from '@shared/schema';\n\nconst router = Router();\n\n// Validation schema for contact form\nconst contactSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  email: z.string().email('Valid email is required'),\n  subject: z.string().min(1, 'Subject is required'),\n  category: z.string().min(1, 'Category is required'),\n  message: z.string().min(1, 'Message is required'),\n});\n\n// POST /api/contact - Create a new contact message\nrouter.post('/', async (req, res) => {\n  try {\n    const validation = contactSchema.safeParse(req.body);\n    \n    if (!validation.success) {\n      return res.status(400).json({ \n        message: 'Invalid input', \n        errors: validation.error.errors \n      });\n    }\n\n    const { name, email, subject, category, message } = validation.data;\n\n    // Create message\n    const newMessage = await storage.createMessage({\n      name,\n      email,\n      subject,\n      category,\n      message\n    });\n\n    res.status(201).json({\n      message: 'Contact message sent successfully',\n      data: {\n        id: newMessage.id,\n        name: newMessage.name,\n        email: newMessage.email,\n        subject: newMessage.subject,\n        category: newMessage.category,\n        message: newMessage.message,\n        createdAt: newMessage.createdAt\n      }\n    });\n  } catch (error) {\n    console.error('Create contact message error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// GET /api/contact - Get all contact messages\nrouter.get('/', async (req, res) => {\n  try {\n    const messages = await storage.getAllMessages();\n\n    res.json({\n      message: 'Messages retrieved successfully',\n      data: messages.map(msg => ({\n        id: msg.id,\n        name: msg.name,\n        email: msg.email,\n        subject: msg.subject,\n        category: msg.category,\n        message: msg.message,\n        createdAt: msg.createdAt\n      }))\n    });\n  } catch (error) {\n    console.error('Get contact messages error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\nexport default router;\n","size_bytes":2205},"server/routes/plan.ts":{"content":"import { Router } from 'express';\nimport { z } from 'zod';\nimport { storage } from '../storage';\nimport { authenticateToken } from '../middleware/auth';\nimport { type AuthRequest } from '../auth';\nimport { generateDailyPlan } from '../services/ai/generateDailyPlan';\n\nconst router = Router();\n\n// Validation schemas\nconst generatePlanSchema = z.object({\n  date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Date must be in YYYY-MM-DD format').optional(),\n  timezone: z.string().optional(),\n});\n\nconst planningDataSchema = z.object({\n  long_term_plan: z.object({\n    description: z.string(),\n    milestones: z.array(z.string())\n  }).optional(),\n  monthly_plan: z.object({\n    description: z.string(),\n    key_tasks: z.array(z.string())\n  }).optional(),\n  daily_tasks: z.array(z.object({\n    id: z.string(),\n    title: z.string(),\n    time: z.string().regex(/^\\d{2}:\\d{2}$/, 'Time must be in HH:MM format'),\n    type: z.enum(['workout', 'meal', 'reading', 'work', 'rest']),\n    completed: z.boolean().default(false),\n    description: z.string()\n  })).optional()\n});\n\n// POST /api/plan/generate - Generate daily plan\nrouter.post('/generate', authenticateToken, async (req: AuthRequest, res) => {\n  try {\n    const validation = generatePlanSchema.safeParse(req.body);\n    \n    if (!validation.success) {\n      return res.status(400).json({ \n        message: 'Invalid input', \n        errors: validation.error.errors \n      });\n    }\n\n    // Get user's profile\n    const profile = await storage.getProfile(req.user!.id);\n    if (!profile) {\n      return res.status(400).json({ message: 'Profile not found. Please complete your profile first.' });\n    }\n\n    // Default values\n    const date = validation.data.date || new Date().toISOString().slice(0, 10);\n    const timezone = validation.data.timezone || Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n    // Generate daily plan\n    const dailyPlan = await generateDailyPlan({ profile, date, timezone });\n\n    // Save plan to database\n    await storage.upsertDailyPlan({\n      userId: req.user!.id,\n      date,\n      timezone,\n      planJson: JSON.stringify(dailyPlan)\n    });\n\n    res.status(202).json({\n      message: 'Plan generation started',\n      date,\n      timezone\n    });\n  } catch (error) {\n    console.error('Generate plan error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// GET /api/plan - Get daily plan for specific date\nrouter.get('/', authenticateToken, async (req: AuthRequest, res) => {\n  try {\n    const { date } = req.query;\n    \n    if (!date || typeof date !== 'string') {\n      return res.status(400).json({ message: 'Date parameter is required (YYYY-MM-DD format)' });\n    }\n\n    // Validate date format\n    if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(date)) {\n      return res.status(400).json({ message: 'Date must be in YYYY-MM-DD format' });\n    }\n\n    const plan = await storage.getDailyPlan(req.user!.id, date);\n    \n    if (!plan) {\n      return res.status(404).json({ message: 'Plan not found for this date' });\n    }\n\n    // Parse the plan JSON\n    let planData;\n    try {\n      planData = JSON.parse(plan.planJson);\n    } catch (error) {\n      console.error('Error parsing plan JSON:', error);\n      return res.status(500).json({ message: 'Error parsing plan data' });\n    }\n\n    res.json({\n      message: 'Plan retrieved successfully',\n      plan: {\n        id: plan.id,\n        userId: plan.userId,\n        date: plan.date,\n        timezone: plan.timezone,\n        data: planData,\n        createdAt: plan.createdAt,\n        updatedAt: plan.updatedAt\n      }\n    });\n  } catch (error) {\n    console.error('Get plan error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// GET /api/plan/today - Convenience endpoint for today's plan\nrouter.get('/today', authenticateToken, async (req: AuthRequest, res) => {\n  const today = new Date().toISOString().slice(0, 10);\n  \n  try {\n    const plan = await storage.getDailyPlan(req.user!.id, today);\n    \n    if (!plan) {\n      return res.status(404).json({ message: 'Plan not found for today' });\n    }\n\n    // Parse the plan JSON\n    let planData;\n    try {\n      planData = JSON.parse(plan.planJson);\n    } catch (error) {\n      console.error('Error parsing plan JSON:', error);\n      return res.status(500).json({ message: 'Error parsing plan data' });\n    }\n\n    res.json({\n      message: 'Plan retrieved successfully',\n      plan: {\n        id: plan.id,\n        userId: plan.userId,\n        date: plan.date,\n        timezone: plan.timezone,\n        data: planData,\n        createdAt: plan.createdAt,\n        updatedAt: plan.updatedAt\n      }\n    });\n  } catch (error) {\n    console.error('Get today plan error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// POST /api/plan/comprehensive - Save comprehensive planning data (long-term, monthly, daily)\nrouter.post('/comprehensive', authenticateToken, async (req: AuthRequest, res) => {\n  try {\n    const validation = planningDataSchema.safeParse(req.body);\n    \n    if (!validation.success) {\n      return res.status(400).json({ \n        message: 'Invalid planning data', \n        errors: validation.error.errors \n      });\n    }\n\n    const { long_term_plan, monthly_plan, daily_tasks } = validation.data;\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const currentYear = new Date().getFullYear();\n    const currentMonth = String(new Date().getMonth() + 1).padStart(2, '0');\n    const today = new Date().toISOString().slice(0, 10);\n\n    // Save long-term plan if provided\n    if (long_term_plan) {\n      await storage.upsertDailyPlan({\n        userId: req.user!.id,\n        date: `long-term-${currentYear}`,\n        timezone,\n        planJson: JSON.stringify(long_term_plan)\n      });\n    }\n\n    // Save monthly plan if provided\n    if (monthly_plan) {\n      await storage.upsertDailyPlan({\n        userId: req.user!.id,\n        date: `monthly-${currentYear}-${currentMonth}`,\n        timezone,\n        planJson: JSON.stringify(monthly_plan)\n      });\n    }\n\n    // Save daily tasks if provided\n    if (daily_tasks) {\n      await storage.upsertDailyPlan({\n        userId: req.user!.id,\n        date: today,\n        timezone,\n        planJson: JSON.stringify({ daily_tasks })\n      });\n    }\n\n    res.json({\n      message: 'Planning data saved successfully',\n      saved: {\n        long_term: !!long_term_plan,\n        monthly: !!monthly_plan,\n        daily: !!daily_tasks\n      }\n    });\n  } catch (error) {\n    console.error('Save comprehensive plan error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// GET /api/plan/comprehensive - Get all planning data (long-term, monthly, daily)\nrouter.get('/comprehensive', authenticateToken, async (req: AuthRequest, res) => {\n  try {\n    const currentYear = new Date().getFullYear();\n    const currentMonth = String(new Date().getMonth() + 1).padStart(2, '0');\n    const today = new Date().toISOString().slice(0, 10);\n\n    // Get long-term plan\n    const longTermPlan = await storage.getDailyPlan(req.user!.id, `long-term-${currentYear}`);\n    \n    // Get monthly plan\n    const monthlyPlan = await storage.getDailyPlan(req.user!.id, `monthly-${currentYear}-${currentMonth}`);\n    \n    // Get daily plan\n    const dailyPlan = await storage.getDailyPlan(req.user!.id, today);\n\n    // Parse the plans\n    let longTermData = null;\n    let monthlyData = null;\n    let dailyData = null;\n\n    try {\n      if (longTermPlan) {\n        longTermData = JSON.parse(longTermPlan.planJson);\n      }\n      if (monthlyPlan) {\n        monthlyData = JSON.parse(monthlyPlan.planJson);\n      }\n      if (dailyPlan) {\n        const parsed = JSON.parse(dailyPlan.planJson);\n        dailyData = parsed.daily_tasks || parsed.items || [];\n      }\n    } catch (error) {\n      console.error('Error parsing plan data:', error);\n    }\n\n    res.json({\n      message: 'Planning data retrieved successfully',\n      data: {\n        long_term_plan: longTermData,\n        monthly_plan: monthlyData,\n        daily_tasks: dailyData\n      }\n    });\n  } catch (error) {\n    console.error('Get comprehensive plan error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\nconst updateTaskSchema = z.object({\n  taskId: z.string().min(1, 'Task ID is required'),\n  completed: z.boolean(),\n  date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Date must be in YYYY-MM-DD format').optional()\n});\n\n// POST /api/plan/update-task - Update individual task completion\nrouter.post('/update-task', authenticateToken, async (req: AuthRequest, res) => {\n  try {\n    const validation = updateTaskSchema.safeParse(req.body);\n    \n    if (!validation.success) {\n      return res.status(400).json({ \n        message: 'Invalid input', \n        errors: validation.error.errors \n      });\n    }\n\n    const { taskId, completed, date } = validation.data;\n    const targetDate = date || new Date().toISOString().slice(0, 10);\n    \n    // Get current daily plan\n    const plan = await storage.getDailyPlan(req.user!.id, targetDate);\n    \n    if (!plan) {\n      return res.status(404).json({ message: 'Daily plan not found' });\n    }\n\n    // Parse plan data\n    let planData;\n    try {\n      planData = JSON.parse(plan.planJson);\n    } catch (error) {\n      return res.status(500).json({ message: 'Error parsing plan data' });\n    }\n\n    // Find and update the task in daily_tasks or items array\n    const tasks = planData.daily_tasks || planData.items || [];\n    const taskIndex = tasks.findIndex((task: any) => task.id === taskId);\n    \n    if (taskIndex === -1) {\n      return res.status(404).json({ message: 'Task not found' });\n    }\n\n    // Update only the completed status\n    tasks[taskIndex].completed = completed;\n    \n    // Preserve original plan structure while updating the tasks\n    if (planData.daily_tasks) {\n      planData.daily_tasks = tasks;\n    } else if (planData.items) {\n      planData.items = tasks;\n    } else {\n      planData.daily_tasks = tasks;\n    }\n    \n    // Save updated plan preserving all other fields\n    await storage.upsertDailyPlan({\n      userId: req.user!.id,\n      date: targetDate,\n      timezone: plan.timezone,\n      planJson: JSON.stringify(planData)\n    });\n\n    res.json({\n      message: 'Task updated successfully',\n      task: tasks[taskIndex]\n    });\n  } catch (error) {\n    console.error('Update task error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\nexport default router;\n","size_bytes":10515},"server/routes/profile.ts":{"content":"import { Router } from 'express';\nimport { z } from 'zod';\nimport { storage } from '../storage';\nimport { authenticateToken } from '../middleware/auth';\nimport { type AuthRequest } from '../auth';\nimport { buildAIContext } from '../services/ai/buildAIContext';\n\nconst router = Router();\n\n// Validation schemas\nconst profileSchema = z.object({\n  workStudy: z.string().min(1, 'Work/study is required'),\n  hobbies: z.string().min(1, 'Hobbies are required'),\n  sports: z.string().min(1, 'Sports are required'),\n  location: z.string().min(1, 'Location is required'),\n  weight: z.number().min(0).nullable().optional(),\n  height: z.number().min(0).nullable().optional(),\n  age: z.number().min(0).nullable().optional(),\n  reading: z.string().nullable().optional(),\n  extraInformation: z.string().nullable().optional(),\n});\n\n// GET /api/profile/me - Get current user's profile\nrouter.get('/me', authenticateToken, async (req: AuthRequest, res) => {\n  try {\n    const profile = await storage.getProfile(req.user!.id);\n    \n    if (!profile) {\n      return res.status(404).json({ message: 'Profile not found' });\n    }\n\n    res.json({\n      message: 'Profile retrieved successfully',\n      profile: {\n        id: profile.id,\n        userId: profile.userId,\n        workStudy: profile.workStudy,\n        hobbies: profile.hobbies,\n        sports: profile.sports,\n        location: profile.location,\n        weight: profile.weightKg,\n        height: profile.heightCm,\n        age: profile.ageYears,\n        reading: profile.reading,\n        extraInformation: profile.extraInformation,\n        createdAt: profile.createdAt,\n        updatedAt: profile.updatedAt\n      }\n    });\n  } catch (error) {\n    console.error('Get profile error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// POST /api/profile - Create or update profile\nrouter.post('/', authenticateToken, async (req: AuthRequest, res) => {\n  try {\n    const validation = profileSchema.safeParse(req.body);\n    \n    if (!validation.success) {\n      return res.status(400).json({ \n        message: 'Invalid input', \n        errors: validation.error.errors \n      });\n    }\n\n    const { workStudy, hobbies, sports, location, weight, height, age, reading, extraInformation } = validation.data;\n\n    // Create/update profile\n    const profile = await storage.upsertProfile({\n      userId: req.user!.id,\n      workStudy,\n      hobbies,\n      sports,\n      location,\n      weightKg: weight,\n      heightCm: height,\n      ageYears: age,\n      reading,\n      extraInformation\n    });\n\n    // Build AI context and update profile\n    const aiContext = buildAIContext(profile);\n    const updatedProfile = await storage.upsertProfile({\n      ...profile,\n      aiContext\n    });\n\n    res.json({\n      message: 'Profile saved successfully',\n      profile: {\n        id: updatedProfile.id,\n        userId: updatedProfile.userId,\n        workStudy: updatedProfile.workStudy,\n        hobbies: updatedProfile.hobbies,\n        sports: updatedProfile.sports,\n        location: updatedProfile.location,\n        weight: updatedProfile.weightKg,\n        height: updatedProfile.heightCm,\n        age: updatedProfile.ageYears,\n        reading: updatedProfile.reading,\n        extraInformation: updatedProfile.extraInformation,\n        createdAt: updatedProfile.createdAt,\n        updatedAt: updatedProfile.updatedAt\n      }\n    });\n  } catch (error) {\n    console.error('Save profile error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\nexport default router;\n","size_bytes":3553},"client/src/components/AppSidebar.tsx":{"content":"import { Home, Calendar, Target, TrendingUp, MessageSquare, Settings, LogOut } from \"lucide-react\"\nimport { Link, useLocation } from \"wouter\"\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport { useLanguage } from \"@/contexts/LanguageContext\"\nimport { useAuth } from \"@/contexts/AuthContext\"\n\nexport function AppSidebar() {\n  const [location] = useLocation()\n  const { t } = useLanguage()\n  const { user, logout } = useAuth()\n\n  const menuItems = [\n    {\n      title: t.nav_dashboard,\n      url: \"/dashboard\",\n      icon: Home,\n    },\n    {\n      title: t.nav_monthly,\n      url: \"/monthly\",\n      icon: Calendar,\n    },\n    {\n      title: t.nav_progress,\n      url: \"/progress\",\n      icon: TrendingUp,\n    },\n    {\n      title: t.nav_goals,\n      url: \"/goals\", \n      icon: Target,\n    },\n  ]\n\n  const supportItems = [\n    {\n      title: t.nav_contact,\n      url: \"/contact\",\n      icon: MessageSquare,\n    },\n    {\n      title: t.nav_settings,\n      url: \"/settings\",\n      icon: Settings,\n    },\n  ]\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <span className=\"text-primary-foreground font-bold text-sm\">LP</span>\n          </div>\n          <span className=\"font-bold text-lg\">{t.app_name}</span>\n        </div>\n      </SidebarHeader>\n      \n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Planning</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                      <item.icon className=\"w-4 h-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n        \n        <SidebarGroup>\n          <SidebarGroupLabel>Support</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {supportItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                      <item.icon className=\"w-4 h-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n      \n      <SidebarFooter className=\"p-4\">\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center gap-3\">\n            <Avatar className=\"w-8 h-8\">\n              <AvatarImage src=\"\" />\n              <AvatarFallback>\n                {user ? user.name.split(' ').map(n => n[0]).join('').toUpperCase() : 'U'}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium truncate\">{user?.name || 'User'}</p>\n              <p className=\"text-xs text-muted-foreground truncate\">{user?.email || 'user@example.com'}</p>\n            </div>\n          </div>\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={logout}\n            className=\"w-full\"\n          >\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            Logout\n          </Button>\n        </div>\n      </SidebarFooter>\n    </Sidebar>\n  )\n}","size_bytes":4185},"client/src/components/AuthForm.tsx":{"content":"import { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { useLanguage } from \"@/contexts/LanguageContext\"\n\ninterface AuthResponse {\n  message: string;\n  user: {\n    id: number;\n    name: string;\n    email: string;\n  };\n  accessToken: string;\n  refreshToken: string;\n}\n\nexport function AuthForm({ onAuthSuccess }: { onAuthSuccess: (user: any, accessToken: string, refreshToken: string) => void }) {\n  const [isLoading, setIsLoading] = useState(false)\n  const [activeTab, setActiveTab] = useState(\"login\")\n  const { toast } = useToast()\n  const { t } = useLanguage()\n\n  const handleLogin = async (email: string, password: string) => {\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message || 'Login failed');\n    }\n\n    return data as AuthResponse;\n  };\n\n  const handleRegister = async (name: string, email: string, password: string) => {\n    const response = await fetch('/api/auth/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ name, email, password }),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message || 'Registration failed');\n    }\n\n    return data as AuthResponse;\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    setIsLoading(true)\n    \n    try {\n      const formData = new FormData(e.currentTarget);\n      const isLogin = activeTab === \"login\";\n      \n      let response: AuthResponse;\n      \n      if (isLogin) {\n        const email = formData.get(\"email\") as string;\n        const password = formData.get(\"password\") as string;\n        response = await handleLogin(email, password);\n      } else {\n        const name = formData.get(\"name\") as string;\n        const email = formData.get(\"reg-email\") as string;\n        const password = formData.get(\"reg-password\") as string;\n        response = await handleRegister(name, email, password);\n      }\n\n      // Show success toast\n      toast({\n        title: t.success,\n        description: response.message,\n      });\n\n      // Call success callback with user data and tokens\n      onAuthSuccess(response.user, response.accessToken, response.refreshToken);\n    } catch (error) {\n      // Show error toast\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"An unexpected error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-background\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">{t.auth_title}</CardTitle>\n          <CardDescription className=\"text-center\">\n            {t.auth_description}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">{t.auth_login}</TabsTrigger>\n              <TabsTrigger value=\"register\" data-testid=\"tab-register\">{t.auth_register}</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"login\" className=\"space-y-4\">\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">{t.auth_email}</Label>\n                  <Input \n                    id=\"email\" \n                    name=\"email\"\n                    type=\"email\" \n                    placeholder=\"your@email.com\"\n                    data-testid=\"input-email\"\n                    required \n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">{t.auth_password}</Label>\n                  <Input \n                    id=\"password\" \n                    name=\"password\"\n                    type=\"password\"\n                    data-testid=\"input-password\"\n                    required \n                  />\n                </div>\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isLoading}\n                  data-testid=\"button-login\"\n                >\n                  {isLoading ? t.auth_signing_in : t.auth_signin}\n                </Button>\n              </form>\n            </TabsContent>\n            \n            <TabsContent value=\"register\" className=\"space-y-4\">\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">{t.auth_name}</Label>\n                  <Input \n                    id=\"name\" \n                    name=\"name\"\n                    placeholder=\"John Doe\"\n                    data-testid=\"input-name\"\n                    required \n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"reg-email\">{t.auth_email}</Label>\n                  <Input \n                    id=\"reg-email\" \n                    name=\"reg-email\"\n                    type=\"email\" \n                    placeholder=\"your@email.com\"\n                    data-testid=\"input-register-email\"\n                    required \n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"reg-password\">{t.auth_password}</Label>\n                  <Input \n                    id=\"reg-password\" \n                    name=\"reg-password\"\n                    type=\"password\"\n                    data-testid=\"input-register-password\"\n                    required \n                  />\n                </div>\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isLoading}\n                  data-testid=\"button-register\"\n                >\n                  {isLoading ? t.auth_creating_account : t.auth_create_account}\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":6873},"client/src/components/ContactForm.tsx":{"content":"import { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Mail, MessageSquare, Phone, MapPin } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport function ContactForm() {\n  const [isLoading, setIsLoading] = useState(false)\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    category: \"\",\n    message: \"\"\n  })\n  const { toast } = useToast()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n    \n    try {\n      const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '/';\n      \n      const response = await fetch(`${API_BASE_URL}api/contact`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to send message');\n      }\n\n      toast({\n        title: \"Message sent!\",\n        description: \"We'll get back to you within 24 hours.\",\n      });\n      \n      // Reset form\n      setFormData({ name: \"\", email: \"\", subject: \"\", category: \"\", message: \"\" });\n      \n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const updateField = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-3xl font-bold\">Contact Us</h1>\n        <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n          Have questions, feedback, or need support? We're here to help you get the most out of your LifePlan experience.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Contact Info */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center gap-3 mb-4\">\n                <Mail className=\"w-5 h-5 text-chart-2\" />\n                <h3 className=\"font-semibold\">Email Support</h3>\n              </div>\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                Get help with your account, billing, or technical issues\n              </p>\n              <p className=\"font-medium\">kamyarmf1@gmail.com</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center gap-3 mb-4\">\n                <MessageSquare className=\"w-5 h-5 text-chart-3\" />\n                <h3 className=\"font-semibold\">Live Chat</h3>\n              </div>\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                Quick questions? Chat with our support team\n              </p>\n              <p className=\"font-medium\">Available 8 AM - ela</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center gap-3 mb-4\">\n                <Phone className=\"w-5 h-5 text-chart-4\" />\n                <h3 className=\"font-semibold\">Phone Support</h3>\n              </div>\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                For urgent matters and detailed assistance\n              </p>\n              <p className=\"font-medium\">+98 938 298 9027</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Contact Form */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Send us a message</CardTitle>\n              <CardDescription>\n                Fill out the form below and we'll respond as quickly as possible\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Full Name</Label>\n                    <Input\n                      id=\"name\"\n                      placeholder=\"John Doe\"\n                      value={formData.name}\n                      onChange={(e) => updateField('name', e.target.value)}\n                      data-testid=\"input-contact-name\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"john@example.com\"\n                      value={formData.email}\n                      onChange={(e) => updateField('email', e.target.value)}\n                      data-testid=\"input-contact-email\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"category\">Category</Label>\n                    <Select value={formData.category} onValueChange={(value) => updateField('category', value)}>\n                      <SelectTrigger data-testid=\"select-contact-category\">\n                        <SelectValue placeholder=\"Select a category\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"support\">Technical Support</SelectItem>\n                        <SelectItem value=\"billing\">Billing & Account</SelectItem>\n                        <SelectItem value=\"feature\">Feature Request</SelectItem>\n                        <SelectItem value=\"bug\">Bug Report</SelectItem>\n                        <SelectItem value=\"feedback\">General Feedback</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"subject\">Subject</Label>\n                    <Input\n                      id=\"subject\"\n                      placeholder=\"Brief description of your inquiry\"\n                      value={formData.subject}\n                      onChange={(e) => updateField('subject', e.target.value)}\n                      data-testid=\"input-contact-subject\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"message\">Message</Label>\n                  <Textarea\n                    id=\"message\"\n                    placeholder=\"Please provide details about your inquiry, including any relevant information that might help us assist you better.\"\n                    className=\"min-h-[120px]\"\n                    value={formData.message}\n                    onChange={(e) => updateField('message', e.target.value)}\n                    data-testid=\"input-contact-message\"\n                    required\n                  />\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\"\n                  disabled={isLoading}\n                  data-testid=\"button-send-message\"\n                >\n                  {isLoading ? \"Sending message...\" : \"Send Message\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* FAQ Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Frequently Asked Questions</CardTitle>\n          <CardDescription>Quick answers to common questions</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h3 className=\"font-semibold mb-2\">How does AI planning work?</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Our AI analyzes your profile, preferences, and goals to create personalized daily and monthly plans that adapt to your lifestyle and cultural context.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">Can I modify AI suggestions?</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Absolutely! All AI-generated plans are fully customizable. You can edit, add, or remove tasks to fit your specific needs and preferences.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">Is my data secure?</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Yes, we use enterprise-grade encryption and security measures to protect your personal information. Your data is never shared with third parties.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">How accurate are progress predictions?</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Our predictions improve over time as the AI learns your patterns. Initial estimates are based on proven methodologies and user data trends.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":10007},"client/src/components/DailyDashboard.tsx":{"content":"import { useEffect, useState } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Clock, CheckCircle2, Circle, Edit, Zap, Book, Dumbbell, Coffee, Brain } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { useLanguage } from \"@/contexts/LanguageContext\"\n\ninterface Task {\n  id: string\n  title: string\n  time: string\n  type: 'workout' | 'meal' | 'reading' | 'work' | 'rest'\n  completed: boolean\n  description?: string\n}\n\nconst typeIcons = {\n  workout: Dumbbell,\n  meal: Coffee,\n  reading: Book,\n  work: Brain,\n  rest: Clock,\n}\n\nconst typeColors = {\n  workout: 'bg-chart-1',\n  meal: 'bg-chart-3', \n  reading: 'bg-chart-2',\n  work: 'bg-chart-4',\n  rest: 'bg-chart-5',\n}\n\nexport function DailyDashboard() {\n  const [tasks, setTasks] = useState<Task[]>([])\n  const { toast } = useToast()\n  const { t } = useLanguage()\n\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const API_BASE_URL = ((import.meta.env.VITE_API_BASE_URL as string) || '/').replace(/\\/?$/, '/')\n        const accessToken = localStorage.getItem('accessToken')\n\n        // First try to load comprehensive planning data\n        let res = await fetch(`${API_BASE_URL}api/plan/comprehensive`, {\n          headers: {\n            ...(accessToken ? { Authorization: `Bearer ${accessToken}` } : {}),\n          },\n        })\n\n        if (res.status === 404 || !res.ok) {\n          // Fall back to generating via AI if no comprehensive data exists\n          res = await fetch(`${API_BASE_URL}api/ai/daily-tasks`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              ...(accessToken ? { Authorization: `Bearer ${accessToken}` } : {}),\n            },\n          })\n        }\n\n        if (!res.ok) {\n          const text = await res.text()\n          throw new Error(`Load tasks error ${res.status}: ${text}`)\n        }\n\n        const data = await res.json()\n        \n        // Handle comprehensive planning data or fallback to AI-generated tasks\n        const dailyTasks = data?.data?.daily_tasks || \n                          data?.plan?.data?.items || \n                          data?.plan?.data?.daily_tasks || \n                          data?.daily_tasks || []\n\n        const defaultByType: Record<string, string> = {\n          workout: '07:00',\n          meal: '08:30',\n          work: '09:00',\n          rest: '18:00',\n          reading: '20:00',\n        }\n\n        const processedTasks: Task[] = (dailyTasks ?? []).map((t: any) => ({\n          id: String(t.id ?? crypto.randomUUID?.() ?? Math.random().toString(36).slice(2)),\n          title: String(t.title ?? ''),\n          time: String((t.time && String(t.time)) || defaultByType[String(t.type)] || '09:00'),\n          type: (t.type as Task['type']) ?? 'work',\n          completed: Boolean(t.completed ?? false),\n          description: t.description ? String(t.description) : undefined,\n        }))\n\n        // If no tasks exist, provide a full-day template\n        if (processedTasks.length === 0) {\n          const fullDayTasks: Task[] = [\n            { id: '1', title: 'Sleep', time: '23:00', type: 'rest', completed: false, description: 'Sleep from 11:00 PM to 6:00 AM' },\n            { id: '2', title: 'Morning Routine', time: '06:00', type: 'rest', completed: false, description: 'Wake up and morning preparation' },\n            { id: '3', title: 'Morning Workout', time: '07:00', type: 'workout', completed: false, description: '30min cardio + stretching' },\n            { id: '4', title: 'Healthy Breakfast', time: '08:30', type: 'meal', completed: false, description: 'Oatmeal with berries' },\n            { id: '5', title: 'Deep Work Session', time: '09:00', type: 'work', completed: false, description: 'Focus block - main projects' },\n            { id: '6', title: 'Lunch Break', time: '12:30', type: 'meal', completed: false, description: 'Healthy lunch and short walk' },\n            { id: '7', title: 'Afternoon Work', time: '14:00', type: 'work', completed: false, description: 'Secondary tasks and meetings' },\n            { id: '8', title: 'Evening Reading', time: '20:00', type: 'reading', completed: false, description: 'Read for 30-45 minutes' },\n            { id: '9', title: 'Wind Down', time: '21:30', type: 'rest', completed: false, description: 'Prepare for sleep and relaxation' },\n          ]\n          setTasks(fullDayTasks)\n        } else {\n          setTasks(processedTasks)\n        }\n      } catch (err) {\n        console.error(err)\n        // Fallback to full-day template on error\n        setTasks([\n          { id: '1', title: 'Sleep', time: '23:00', type: 'rest', completed: false, description: 'Sleep from 11:00 PM to 6:00 AM' },\n          { id: '2', title: 'Morning Routine', time: '06:00', type: 'rest', completed: false, description: 'Wake up and morning preparation' },\n          { id: '3', title: 'Morning Workout', time: '07:00', type: 'workout', completed: false, description: '30min cardio + stretching' },\n          { id: '4', title: 'Healthy Breakfast', time: '08:30', type: 'meal', completed: false, description: 'Nutritious breakfast' },\n          { id: '5', title: 'Deep Work', time: '09:00', type: 'work', completed: false, description: 'Focus block' },\n        ])\n      }\n    }\n\n    fetchTasks()\n  }, [])\n\n  const toggleTask = async (taskId: string) => {\n    const next = tasks.map(t => t.id === taskId ? { ...t, completed: !t.completed } : t)\n    setTasks(next)\n\n    try {\n      const API_BASE_URL = ((import.meta.env.VITE_API_BASE_URL as string) || '/').replace(/\\/?$/, '/')\n      const accessToken = localStorage.getItem('accessToken')\n      const today = new Date().toISOString().slice(0, 10)\n      const updated = next.find(t => t.id === taskId)!\n\n      // Use the new comprehensive planning API\n      const response = await fetch(`${API_BASE_URL}api/plan/update-task`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...(accessToken ? { Authorization: `Bearer ${accessToken}` } : {}),\n        },\n        body: JSON.stringify({ \n          taskId: updated.id, \n          completed: updated.completed, \n          date: today \n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Update failed: ${response.status}`)\n      }\n\n      toast({\n        title: \"Task updated!\",\n        description: \"Your progress has been saved.\",\n      })\n    } catch (e) {\n      console.error(e)\n      // Revert the change if API call fails\n      setTasks(tasks)\n      \n      toast({\n        title: \"Update failed\",\n        description: \"Unable to save your progress. Please try again.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  const completedTasks = tasks.filter(task => task.completed).length\n  const totalTasks = tasks.length\n  const progressPercentage = (completedTasks / totalTasks) * 100\n\n  const currentDate = new Date().toLocaleDateString(\"en-US\", {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  })\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">{t.dashboard_good_morning}</h1>\n          <p className=\"text-muted-foreground\">{currentDate}</p>\n        </div>\n        <Button variant=\"outline\" data-testid=\"button-edit-schedule\">\n          <Edit className=\"w-4 h-4 mr-2\" />\n          {t.dashboard_edit_schedule}\n        </Button>\n      </div>\n\n      {/* Progress Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Zap className=\"w-5 h-5 text-chart-2\" />\n            {t.dashboard_progress}\n          </CardTitle>\n          <CardDescription>\n            {completedTasks} of {totalTasks} tasks completed\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Progress value={progressPercentage} className=\"h-2\" />\n          <div className=\"flex justify-between text-sm text-muted-foreground mt-2\">\n            <span>{progressPercentage.toFixed(0)}% Complete</span>\n            <span>{totalTasks - completedTasks} tasks remaining</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Task List */}\n      <div className=\"space-y-3\">\n        {tasks.map((task) => {\n          const Icon = typeIcons[task.type] ?? Brain\n          const colorClass = typeColors[task.type]\n          \n          return (\n            <Card \n              key={task.id} \n              className={`hover-elevate cursor-pointer transition-all ${\n                task.completed ? \"opacity-70\" : \"\"\n              }`}\n              onClick={() => toggleTask(task.id)}\n              data-testid={`task-${task.id}`}\n            >\n              <CardContent className=\"flex items-center gap-4 p-4\">\n                <button className=\"flex-shrink-0\">\n                  {task.completed ? (\n                    <CheckCircle2 className=\"w-6 h-6 text-chart-1\" />\n                  ) : (\n                    <Circle className=\"w-6 h-6 text-muted-foreground\" />\n                  )}\n                </button>\n                \n                <div className={`p-2 rounded-lg ${colorClass}/20`}>\n                  <Icon className=\"w-4 h-4\" />\n                </div>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <h3\n                      className={`font-medium ${\n                        task.completed ? \"line-through text-muted-foreground\" : \"\"\n                      }`}\n                    >\n                      {task.title}\n                    </h3>\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {task.time}\n                    </Badge>\n                  </div>\n                  {task.description && (\n                    <p className=\"text-sm text-muted-foreground\">\n                      {task.description}\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n","size_bytes":10341},"client/src/components/LanguageToggle.tsx":{"content":"import { Languages } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { useLanguage } from \"@/contexts/LanguageContext\"\n\nexport function LanguageToggle() {\n  const { language, setLanguage } = useLanguage()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          size=\"icon\"\n          data-testid=\"button-language-toggle\"\n        >\n          <Languages className=\"h-[1.2rem] w-[1.2rem]\" />\n          <span className=\"sr-only\">Toggle language</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem \n          onClick={() => setLanguage('en')}\n          className={language === 'en' ? 'bg-accent' : ''}\n          data-testid=\"language-en\"\n        >\n          🇺🇸 English\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => setLanguage('fa')}\n          className={language === 'fa' ? 'bg-accent' : ''}\n          data-testid=\"language-fa\"\n        >\n          🇮🇷 فارسی\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}","size_bytes":1275},"client/src/components/MonthlyPlanner.tsx":{"content":"import { useState } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Calendar, Target, TrendingUp, Trophy, ChevronLeft, ChevronRight } from \"lucide-react\"\n\ninterface Goal {\n  id: string\n  title: string\n  category: 'fitness' | 'learning' | 'career' | 'personal'\n  progress: number\n  target: string\n}\n\ninterface Milestone {\n  id: string\n  title: string\n  date: string\n  completed: boolean\n  description: string\n}\n\n// todo: remove mock functionality\nconst mockGoals: Goal[] = [\n  { id: '1', title: 'Read 4 Books', category: 'learning', progress: 75, target: '4 books' },\n  { id: '2', title: 'Run 100km', category: 'fitness', progress: 60, target: '100km total' },\n  { id: '3', title: 'Complete React Course', category: 'career', progress: 45, target: '100% completion' },\n  { id: '4', title: 'Meditation Streak', category: 'personal', progress: 85, target: '30 days' },\n]\n\nconst mockMilestones: Milestone[] = [\n  { id: '1', title: 'Complete morning routine for 7 days', date: '2024-01-15', completed: true, description: 'Build consistent wake-up habits' },\n  { id: '2', title: 'Finish \"Atomic Habits\" book', date: '2024-01-20', completed: true, description: 'Apply key concepts to daily life' },\n  { id: '3', title: 'Run first 10k of the month', date: '2024-01-25', completed: false, description: 'Improve cardiovascular fitness' },\n  { id: '4', title: 'Complete 3 coding projects', date: '2024-01-30', completed: false, description: 'Build portfolio and skills' },\n]\n\nconst categoryColors = {\n  fitness: 'bg-chart-1',\n  learning: 'bg-chart-2', \n  career: 'bg-chart-4',\n  personal: 'bg-chart-5'\n}\n\nexport function MonthlyPlanner() {\n  const [currentMonth] = useState(new Date())\n\n  const monthYear = currentMonth.toLocaleDateString('en-US', {\n    month: 'long',\n    year: 'numeric'\n  })\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Monthly Overview</h1>\n          <p className=\"text-muted-foreground\">{monthYear} Planning & Goals</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" size=\"icon\" data-testid=\"button-prev-month\">\n            <ChevronLeft className=\"w-4 h-4\" />\n          </Button>\n          <Button variant=\"outline\" size=\"icon\" data-testid=\"button-next-month\">\n            <ChevronRight className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* AI Vision */}\n      <Card className=\"border-accent\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"w-5 h-5 text-accent-foreground\" />\n            AI-Powered Vision\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"bg-accent/50 p-4 rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">6-Month Projection</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              At your current pace, you'll complete 24 books this year, achieve a 5K personal best, \n              and master 3 new programming frameworks. Consistency in your morning routine is your key strength.\n            </p>\n          </div>\n          <div className=\"bg-muted/50 p-4 rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">1-Year Vision</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              By maintaining these habits, you'll develop expertise in full-stack development, \n              complete a marathon, and establish yourself as a knowledge leader in your field.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Monthly Goals */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"w-5 h-5\" />\n              Monthly Goals\n            </CardTitle>\n            <CardDescription>Track your progress this month</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {mockGoals.map((goal) => (\n              <div key={goal.id} className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <h3 className=\"font-medium\">{goal.title}</h3>\n                  <Badge \n                    variant=\"secondary\" \n                    className={`${categoryColors[goal.category]}/20 text-foreground`}\n                  >\n                    {goal.category}\n                  </Badge>\n                </div>\n                <div className=\"space-y-1\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">{goal.target}</span>\n                    <span className=\"font-medium\">{goal.progress}%</span>\n                  </div>\n                  <div className=\"w-full bg-secondary rounded-full h-2\">\n                    <div \n                      className={`h-2 rounded-full ${categoryColors[goal.category]}`}\n                      style={{ width: `${goal.progress}%` }}\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n\n        {/* Milestones */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Trophy className=\"w-5 h-5\" />\n              Key Milestones\n            </CardTitle>\n            <CardDescription>Important achievements this month</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {mockMilestones.map((milestone) => (\n              <div \n                key={milestone.id} \n                className={`flex items-start gap-3 p-3 rounded-lg border ${\n                  milestone.completed ? 'bg-chart-1/10 border-chart-1/30' : 'bg-muted/30'\n                }`}\n              >\n                <div className={`w-6 h-6 rounded-full flex items-center justify-center mt-0.5 ${\n                  milestone.completed ? 'bg-chart-1 text-white' : 'bg-muted-foreground/30'\n                }`}>\n                  {milestone.completed && <Trophy className=\"w-3 h-3\" />}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <h3 className={`font-medium ${milestone.completed ? 'text-chart-1' : ''}`}>\n                    {milestone.title}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {milestone.description}\n                  </p>\n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <Calendar className=\"w-3 h-3 text-muted-foreground\" />\n                    <span className=\"text-xs text-muted-foreground\">\n                      {new Date(milestone.date).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}","size_bytes":7216},"client/src/components/ProfileSetup.tsx":{"content":"import { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { useLanguage } from \"@/contexts/LanguageContext\"\n\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '/';\n\ninterface ProfileData {\n  workStudy: string\n  hobbies: string\n  sports: string\n  location: string\n  weight: string\n  height: string\n  age: string\n  reading: string\n  extraInformation: string\n}\n\nexport function ProfileSetup({ onComplete }: { onComplete: () => void }) {\n  const [step, setStep] = useState(1)\n  const [isLoading, setIsLoading] = useState(false)\n  const { toast } = useToast()\n  const { t } = useLanguage()\n  const [profileData, setProfileData] = useState<ProfileData>({\n    workStudy: \"\",\n    hobbies: \"\",\n    sports: \"\",\n    location: \"\",\n    weight: \"\",\n    height: \"\",\n    age: \"\",\n    reading: \"\",\n    extraInformation: \"\"\n  })\n\n  const totalSteps = 4\n  const progress = (step / totalSteps) * 100\n\n  const updateField = (field: keyof ProfileData, value: string) => {\n    setProfileData(prev => ({ ...prev, [field]: value }))\n  }\n\n  const nextStep = () => {\n    if (step < totalSteps) setStep(step + 1)\n  }\n\n  const prevStep = () => {\n    if (step > 1) setStep(step - 1)\n  }\n\n  const handleSubmit = async () => {\n    setIsLoading(true)\n    \n    try {\n      // Get access token from localStorage\n      const accessToken = localStorage.getItem('accessToken');\n      if (!accessToken) {\n        toast({\n          title: \"Error\",\n          description: \"Please log in first\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Build payload from state\n      const payload = {\n        workStudy: profileData.workStudy,\n        hobbies: profileData.hobbies,\n        sports: profileData.sports,\n        location: profileData.location,\n        reading: profileData.reading || null,\n        weight: profileData.weight ? parseInt(profileData.weight) : null,\n        height: profileData.height ? parseInt(profileData.height) : null,\n        age: profileData.age ? parseInt(profileData.age) : null,\n        extraInformation: profileData.extraInformation || null,\n      };\n\n      // Save profile\n      const profileResponse = await fetch(`${API_BASE_URL}api/profile`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${accessToken}`,\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!profileResponse.ok) {\n        const errorData = await profileResponse.json();\n        throw new Error(errorData.message || 'Failed to save profile');\n      }\n\n      // Fire-and-forget: Generate daily plan\n      const today = new Date().toISOString().slice(0, 10);\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      \n      fetch(`${API_BASE_URL}api/plan/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${accessToken}`,\n        },\n        body: JSON.stringify({ date: today, timezone }),\n      }).catch(error => {\n        console.warn('Failed to generate daily plan:', error);\n      });\n\n      // Show success toast\n      toast({\n        title: \"Profile Complete!\",\n        description: \"Your AI-powered planning will begin shortly.\",\n      });\n\n      // Call completion callback\n      onComplete();\n\n    } catch (error) {\n      // Show error toast\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"An unexpected error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-background p-4\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between mb-4\">\n            <CardTitle>{t.profile_title}</CardTitle>\n            <span className=\"text-sm text-muted-foreground\">{t.profile_step_of.replace('{current}', step.toString()).replace('{total}', totalSteps.toString())}</span>\n          </div>\n          <Progress value={progress} className=\"mb-4\" />\n          <CardDescription>\n            {t.profile_description}\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          {step === 1 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Work & Study</h3>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"work-study\">What is your current work or study situation?</Label>\n                <Textarea\n                  id=\"work-study\"\n                  placeholder=\"e.g., Software engineer at tech company, Computer Science student, freelance designer...\"\n                  value={profileData.workStudy}\n                  onChange={(e) => updateField('workStudy', e.target.value)}\n                  data-testid=\"input-work-study\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"hobbies\">Hobbies and interests</Label>\n                <Textarea\n                  id=\"hobbies\"\n                  placeholder=\"e.g., Reading, photography, cooking, gaming, music production...\"\n                  value={profileData.hobbies}\n                  onChange={(e) => updateField('hobbies', e.target.value)}\n                  data-testid=\"input-hobbies\"\n                />\n              </div>\n            </div>\n          )}\n\n          {step === 2 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Physical Activity & Location</h3>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"sports\">Preferred sports and exercises</Label>\n                <Textarea\n                  id=\"sports\"\n                  placeholder=\"e.g., Running, yoga, weightlifting, swimming, basketball...\"\n                  value={profileData.sports}\n                  onChange={(e) => updateField('sports', e.target.value)}\n                  data-testid=\"input-sports\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\">Where do you live?</Label>\n                <Input\n                  id=\"location\"\n                  placeholder=\"e.g., New York, USA or London, UK\"\n                  value={profileData.location}\n                  onChange={(e) => updateField('location', e.target.value)}\n                  data-testid=\"input-location\"\n                />\n              </div>\n            </div>\n          )}\n\n          {step === 3 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Physical Stats</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"age\">Age</Label>\n                  <Input\n                    id=\"age\"\n                    type=\"number\"\n                    placeholder=\"25\"\n                    value={profileData.age}\n                    onChange={(e) => updateField('age', e.target.value)}\n                    data-testid=\"input-age\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"weight\">Weight (kg)</Label>\n                  <Input\n                    id=\"weight\"\n                    type=\"number\"\n                    placeholder=\"70\"\n                    value={profileData.weight}\n                    onChange={(e) => updateField('weight', e.target.value)}\n                    data-testid=\"input-weight\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"height\">Height (cm)</Label>\n                  <Input\n                    id=\"height\"\n                    type=\"number\"\n                    placeholder=\"175\"\n                    value={profileData.height}\n                    onChange={(e) => updateField('height', e.target.value)}\n                    data-testid=\"input-height\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {step === 4 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Reading Preferences & Additional Information</h3>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"reading\">What do you like to read?</Label>\n                <Textarea\n                  id=\"reading\"\n                  placeholder=\"Leave empty if you'd like AI book recommendations, or tell us your favorite genres, authors, or specific books...\"\n                  value={profileData.reading}\n                  onChange={(e) => updateField('reading', e.target.value)}\n                  data-testid=\"input-reading\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"extra-information\">Extra information</Label>\n                <Textarea\n                  id=\"extra-information\"\n                  placeholder=\"Any additional information you'd like to share about your goals, preferences, or anything else that might help with your planning...\"\n                  value={profileData.extraInformation}\n                  onChange={(e) => updateField('extraInformation', e.target.value)}\n                  data-testid=\"input-extra-information\"\n                />\n              </div>\n              <div className=\"bg-accent/50 p-4 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground\">\n                  💡 Don't worry if you're not sure what to read - our AI will suggest books based on your interests and goals!\n                </p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex justify-between pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={prevStep}\n              disabled={step === 1}\n              data-testid=\"button-previous\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              {t.previous}\n            </Button>\n            \n            {step < totalSteps ? (\n              <Button onClick={nextStep} data-testid=\"button-next\">\n                {t.next}\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            ) : (\n              <Button \n                onClick={handleSubmit} \n                disabled={isLoading}\n                data-testid=\"button-complete\"\n              >\n                {isLoading ? t.profile_creating : t.profile_complete}\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":11183},"client/src/components/ProgressTracking.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from 'recharts'\nimport { TrendingUp, Award, Calendar, Target } from \"lucide-react\"\n\n// todo: remove mock functionality  \nconst mockWeeklyData = [\n  { name: 'Mon', completed: 8, planned: 10 },\n  { name: 'Tue', completed: 9, planned: 10 },\n  { name: 'Wed', completed: 7, planned: 10 },\n  { name: 'Thu', completed: 10, planned: 10 },\n  { name: 'Fri', completed: 6, planned: 10 },\n  { name: 'Sat', completed: 8, planned: 8 },\n  { name: 'Sun', completed: 7, planned: 8 },\n]\n\nconst mockMonthlyProgress = [\n  { month: 'Oct', fitness: 85, learning: 75, work: 90, personal: 70 },\n  { month: 'Nov', fitness: 88, learning: 82, work: 85, personal: 78 },\n  { month: 'Dec', fitness: 92, learning: 88, work: 88, personal: 85 },\n  { month: 'Jan', fitness: 90, learning: 95, work: 92, personal: 88 },\n]\n\nconst mockCategoryBreakdown = [\n  { name: 'Work/Study', value: 35, color: 'hsl(var(--chart-4))' },\n  { name: 'Fitness', value: 25, color: 'hsl(var(--chart-1))' },\n  { name: 'Learning', value: 20, color: 'hsl(var(--chart-2))' },\n  { name: 'Personal', value: 20, color: 'hsl(var(--chart-5))' },\n]\n\nconst achievements = [\n  { title: '7-Day Streak', description: 'Completed morning routine for a week', date: '2024-01-15', type: 'consistency' },\n  { title: 'Reading Goal Met', description: 'Finished 3 books this month', date: '2024-01-12', type: 'learning' },\n  { title: 'Fitness Milestone', description: 'Ran 50km total this month', date: '2024-01-10', type: 'fitness' },\n  { title: 'Work Excellence', description: 'Delivered project ahead of schedule', date: '2024-01-08', type: 'career' },\n]\n\nexport function ProgressTracking() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold\">Progress Tracking</h1>\n        <p className=\"text-muted-foreground\">Visualize your journey and celebrate achievements</p>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">This Week</p>\n                <p className=\"text-2xl font-bold\">87%</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-chart-1\" />\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-2\">+5% from last week</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">This Month</p>\n                <p className=\"text-2xl font-bold\">91%</p>\n              </div>\n              <Calendar className=\"w-8 h-8 text-chart-2\" />\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-2\">+12% from last month</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Goals Met</p>\n                <p className=\"text-2xl font-bold\">15</p>\n              </div>\n              <Target className=\"w-8 h-8 text-chart-3\" />\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-2\">3 this week</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Achievements</p>\n                <p className=\"text-2xl font-bold\">{achievements.length}</p>\n              </div>\n              <Award className=\"w-8 h-8 text-chart-5\" />\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-2\">Latest today</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"weekly\" className=\"space-y-4\">\n        <TabsList data-testid=\"tabs-progress\">\n          <TabsTrigger value=\"weekly\">Weekly View</TabsTrigger>\n          <TabsTrigger value=\"monthly\">Monthly Trends</TabsTrigger>\n          <TabsTrigger value=\"breakdown\">Category Breakdown</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"weekly\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Weekly Task Completion</CardTitle>\n              <CardDescription>Planned vs completed tasks this week</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={mockWeeklyData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"name\" />\n                  <YAxis />\n                  <Bar dataKey=\"planned\" fill=\"hsl(var(--muted))\" name=\"Planned\" />\n                  <Bar dataKey=\"completed\" fill=\"hsl(var(--chart-1))\" name=\"Completed\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"monthly\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Monthly Progress Trends</CardTitle>\n              <CardDescription>Performance across different life areas</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={mockMonthlyProgress}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"month\" />\n                  <YAxis />\n                  <Line type=\"monotone\" dataKey=\"fitness\" stroke=\"hsl(var(--chart-1))\" name=\"Fitness\" strokeWidth={2} />\n                  <Line type=\"monotone\" dataKey=\"learning\" stroke=\"hsl(var(--chart-2))\" name=\"Learning\" strokeWidth={2} />\n                  <Line type=\"monotone\" dataKey=\"work\" stroke=\"hsl(var(--chart-4))\" name=\"Work\" strokeWidth={2} />\n                  <Line type=\"monotone\" dataKey=\"personal\" stroke=\"hsl(var(--chart-5))\" name=\"Personal\" strokeWidth={2} />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"breakdown\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Time Distribution</CardTitle>\n                <CardDescription>How you spend your planned time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <PieChart>\n                    <Pie\n                      data={mockCategoryBreakdown}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={100}\n                      paddingAngle={5}\n                      dataKey=\"value\"\n                    >\n                      {mockCategoryBreakdown.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                  </PieChart>\n                </ResponsiveContainer>\n                <div className=\"mt-4 space-y-2\">\n                  {mockCategoryBreakdown.map((item, index) => (\n                    <div key={index} className=\"flex items-center gap-2\">\n                      <div \n                        className=\"w-3 h-3 rounded-full\" \n                        style={{ backgroundColor: item.color }}\n                      />\n                      <span className=\"text-sm\">{item.name}: {item.value}%</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Achievements</CardTitle>\n                <CardDescription>Your latest milestones</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {achievements.map((achievement, index) => (\n                  <div key={index} className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 bg-chart-1/20 rounded-full flex items-center justify-center\">\n                      <Award className=\"w-4 h-4 text-chart-1\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium\">{achievement.title}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{achievement.description}</p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {new Date(achievement.date).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}","size_bytes":9502},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react'\n\ntype Theme = 'dark' | 'light' | 'system'\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: 'system',\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = 'system',\n  storageKey = 'lifeplan-ui-theme',\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove('light', 'dark')\n\n    if (theme === 'system') {\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)')\n        .matches\n        ? 'dark'\n        : 'light'\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error('useTheme must be used within a ThemeProvider')\n\n  return context\n}","size_bytes":1581},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { useTheme } from \"./ThemeProvider\"\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme()\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  )\n}","size_bytes":687},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (user: User, accessToken: string, refreshToken: string) => void;\n  logout: () => void;\n  checkAuth: () => Promise<boolean>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '/';\n\n  const login = (userData: User, accessToken: string, refreshToken: string) => {\n    setUser(userData);\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n    localStorage.setItem('user', JSON.stringify(userData));\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('user');\n  };\n\n  const checkAuth = async (): Promise<boolean> => {\n    const accessToken = localStorage.getItem('accessToken');\n    const userData = localStorage.getItem('user');\n\n    if (!accessToken || !userData) {\n      return false;\n    }\n\n    try {\n      // Try to validate the token by making a request to a protected endpoint\n      const response = await fetch(`${API_BASE_URL}api/profile/me`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n        },\n      });\n\n      if (response.ok) {\n        const user = JSON.parse(userData);\n        setUser(user);\n        return true;\n      } else if (response.status === 401) {\n        // Token is invalid, try to refresh\n        const refreshToken = localStorage.getItem('refreshToken');\n        if (refreshToken) {\n          const refreshResponse = await fetch(`${API_BASE_URL}api/auth/refresh`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ refreshToken }),\n          });\n\n          if (refreshResponse.ok) {\n            const refreshData = await refreshResponse.json();\n            localStorage.setItem('accessToken', refreshData.accessToken);\n            setUser(JSON.parse(userData));\n            return true;\n          }\n        }\n      }\n\n      // If we get here, authentication failed\n      logout();\n      return false;\n    } catch (error) {\n      console.error('Auth check failed:', error);\n      logout();\n      return false;\n    }\n  };\n\n  useEffect(() => {\n    const initializeAuth = async () => {\n      setIsLoading(true);\n      await checkAuth();\n      setIsLoading(false);\n    };\n\n    initializeAuth();\n  }, []);\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated: !!user,\n    isLoading,\n    login,\n    logout,\n    checkAuth,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n","size_bytes":3340},"client/src/contexts/LanguageContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react'\nimport { translations, Translation } from '@/lib/translations'\n\ntype Language = 'en' | 'fa'\n\ninterface LanguageContextType {\n  language: Language\n  setLanguage: (lang: Language) => void\n  t: Translation\n  isRTL: boolean\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined)\n\nexport function LanguageProvider({ children }: { children: ReactNode }) {\n  const [language, setLanguageState] = useState<Language>(() => {\n    const saved = localStorage.getItem('lifeplan-language')\n    return (saved === 'fa' || saved === 'en') ? saved : 'en'\n  })\n\n  const setLanguage = (lang: Language) => {\n    setLanguageState(lang)\n    localStorage.setItem('lifeplan-language', lang)\n  }\n\n  useEffect(() => {\n    // Set document direction based on language\n    if (language === 'fa') {\n      document.documentElement.dir = 'rtl'\n      document.documentElement.lang = 'fa'\n    } else {\n      document.documentElement.dir = 'ltr'\n      document.documentElement.lang = 'en'\n    }\n  }, [language])\n\n  const value: LanguageContextType = {\n    language,\n    setLanguage,\n    t: translations[language],\n    isRTL: language === 'fa'\n  }\n\n  return (\n    <LanguageContext.Provider value={value}>\n      {children}\n    </LanguageContext.Provider>\n  )\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext)\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider')\n  }\n  return context\n}","size_bytes":1541},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/translations.ts":{"content":"export interface Translation {\n  // Common\n  app_name: string\n  welcome: string\n  loading: string\n  success: string\n  error: string\n  save: string\n  cancel: string\n  edit: string\n  delete: string\n  close: string\n  next: string\n  previous: string\n  complete: string\n  \n  // Navigation\n  nav_dashboard: string\n  nav_monthly: string\n  nav_progress: string\n  nav_goals: string\n  nav_contact: string\n  nav_settings: string\n  \n  // Auth\n  auth_title: string\n  auth_description: string\n  auth_login: string\n  auth_register: string\n  auth_email: string\n  auth_password: string\n  auth_name: string\n  auth_signin: string\n  auth_create_account: string\n  auth_signing_in: string\n  auth_creating_account: string\n  \n  // Profile Setup\n  profile_title: string\n  profile_description: string\n  profile_step_of: string\n  profile_work_study: string\n  profile_work_study_placeholder: string\n  profile_hobbies: string\n  profile_hobbies_placeholder: string\n  profile_sports: string\n  profile_sports_placeholder: string\n  profile_location: string\n  profile_location_placeholder: string\n  profile_age: string\n  profile_weight: string\n  profile_height: string\n  profile_reading: string\n  profile_reading_placeholder: string\n  profile_ai_tip: string\n  profile_complete: string\n  profile_creating: string\n  \n  // Dashboard\n  dashboard_good_morning: string\n  dashboard_progress: string\n  dashboard_tasks_completed: string\n  dashboard_tasks_remaining: string\n  dashboard_ai_recommendation: string\n  dashboard_ai_suggestion: string\n  dashboard_edit_schedule: string\n  \n  // Tasks\n  task_workout: string\n  task_meal: string\n  task_reading: string\n  task_work: string\n  task_rest: string\n  task_morning_workout: string\n  task_healthy_breakfast: string\n  task_deep_work: string\n  task_reading_time: string\n  task_lunch_break: string\n  task_afternoon_work: string\n  task_rest_reflection: string\n  \n  // Monthly Planner\n  monthly_title: string\n  monthly_description: string\n  monthly_ai_vision: string\n  monthly_projection_6: string\n  monthly_projection_12: string\n  monthly_goals: string\n  monthly_milestones: string\n  monthly_track_progress: string\n  \n  // Progress\n  progress_title: string\n  progress_description: string\n  progress_this_week: string\n  progress_this_month: string\n  progress_goals_met: string\n  progress_achievements: string\n  progress_weekly_view: string\n  progress_monthly_trends: string\n  progress_category_breakdown: string\n  progress_task_completion: string\n  progress_trends: string\n  progress_time_distribution: string\n  progress_recent_achievements: string\n  \n  // Contact\n  contact_title: string\n  contact_description: string\n  contact_email_support: string\n  contact_live_chat: string\n  contact_phone_support: string\n  contact_send_message: string\n  contact_name: string\n  contact_category: string\n  contact_subject: string\n  contact_message: string\n  contact_send: string\n  contact_sending: string\n  contact_faq: string\n  \n  // Categories\n  category_fitness: string\n  category_learning: string\n  category_career: string\n  category_personal: string\n}\n\nexport const translations: Record<'en' | 'fa', Translation> = {\n  en: {\n    // Common\n    app_name: \"LifePlan\",\n    welcome: \"Welcome\",\n    loading: \"Loading...\",\n    success: \"Success!\",\n    error: \"Error\",\n    save: \"Save\",\n    cancel: \"Cancel\",\n    edit: \"Edit\",\n    delete: \"Delete\",\n    close: \"Close\",\n    next: \"Next\",\n    previous: \"Previous\",\n    complete: \"Complete\",\n    \n    // Navigation\n    nav_dashboard: \"Dashboard\",\n    nav_monthly: \"Monthly Planner\",\n    nav_progress: \"Progress\",\n    nav_goals: \"Goals\",\n    nav_contact: \"Contact Us\",\n    nav_settings: \"Settings\",\n    \n    // Auth\n    auth_title: \"LifePlan\",\n    auth_description: \"Transform your daily routine with AI-powered planning\",\n    auth_login: \"Login\",\n    auth_register: \"Register\",\n    auth_email: \"Email\",\n    auth_password: \"Password\",\n    auth_name: \"Full Name\",\n    auth_signin: \"Sign In\",\n    auth_create_account: \"Create Account\",\n    auth_signing_in: \"Signing in...\",\n    auth_creating_account: \"Creating account...\",\n    \n    // Profile Setup\n    profile_title: \"Complete Your Profile\",\n    profile_description: \"Help us create your personalized life plan with AI-powered recommendations\",\n    profile_step_of: \"Step {current} of {total}\",\n    profile_work_study: \"What is your current work or study situation?\",\n    profile_work_study_placeholder: \"e.g., Software engineer at tech company, Computer Science student, freelance designer...\",\n    profile_hobbies: \"Hobbies and interests\",\n    profile_hobbies_placeholder: \"e.g., Reading, photography, cooking, gaming, music production...\",\n    profile_sports: \"Preferred sports and exercises\",\n    profile_sports_placeholder: \"e.g., Running, yoga, weightlifting, swimming, basketball...\",\n    profile_location: \"Where do you live?\",\n    profile_location_placeholder: \"e.g., New York, USA or London, UK\",\n    profile_age: \"Age\",\n    profile_weight: \"Weight (kg)\",\n    profile_height: \"Height (cm)\",\n    profile_reading: \"What do you like to read?\",\n    profile_reading_placeholder: \"Leave empty if you'd like AI book recommendations, or tell us your favorite genres, authors, or specific books...\",\n    profile_ai_tip: \"💡 Don't worry if you're not sure what to read - our AI will suggest books based on your interests and goals!\",\n    profile_complete: \"Complete Setup\",\n    profile_creating: \"Creating your plan...\",\n    \n    // Dashboard\n    dashboard_good_morning: \"Good morning! 👋\",\n    dashboard_progress: \"Today's Progress\",\n    dashboard_tasks_completed: \"{completed} of {total} tasks completed\",\n    dashboard_tasks_remaining: \"{remaining} tasks remaining\",\n    dashboard_ai_recommendation: \"AI Recommendation\",\n    dashboard_ai_suggestion: \"Based on your energy levels, consider moving your reading session to after lunch for better focus. Your workout completion shows great consistency!\",\n    dashboard_edit_schedule: \"Edit Schedule\",\n    \n    // Tasks\n    task_workout: \"Workout\",\n    task_meal: \"Meal\",\n    task_reading: \"Reading\",\n    task_work: \"Work\",\n    task_rest: \"Rest\",\n    task_morning_workout: \"Morning Workout\",\n    task_healthy_breakfast: \"Healthy Breakfast\",\n    task_deep_work: \"Deep Work Session\",\n    task_reading_time: \"Reading Time\",\n    task_lunch_break: \"Lunch Break\",\n    task_afternoon_work: \"Afternoon Work\",\n    task_rest_reflection: \"Rest & Reflection\",\n    \n    // Monthly Planner\n    monthly_title: \"Monthly Overview\",\n    monthly_description: \"{month} Planning & Goals\",\n    monthly_ai_vision: \"AI-Powered Vision\",\n    monthly_projection_6: \"At your current pace, you'll complete 24 books this year, achieve a 5K personal best, and master 3 new programming frameworks. Consistency in your morning routine is your key strength.\",\n    monthly_projection_12: \"By maintaining these habits, you'll develop expertise in full-stack development, complete a marathon, and establish yourself as a knowledge leader in your field.\",\n    monthly_goals: \"Monthly Goals\",\n    monthly_milestones: \"Key Milestones\",\n    monthly_track_progress: \"Track your progress this month\",\n    \n    // Progress\n    progress_title: \"Progress Tracking\",\n    progress_description: \"Visualize your journey and celebrate achievements\",\n    progress_this_week: \"This Week\",\n    progress_this_month: \"This Month\",\n    progress_goals_met: \"Goals Met\",\n    progress_achievements: \"Achievements\",\n    progress_weekly_view: \"Weekly View\",\n    progress_monthly_trends: \"Monthly Trends\",\n    progress_category_breakdown: \"Category Breakdown\",\n    progress_task_completion: \"Weekly Task Completion\",\n    progress_trends: \"Performance across different life areas\",\n    progress_time_distribution: \"How you spend your planned time\",\n    progress_recent_achievements: \"Your latest milestones\",\n    \n    // Contact\n    contact_title: \"Contact Us\",\n    contact_description: \"Have questions, feedback, or need support? We're here to help you get the most out of your LifePlan experience.\",\n    contact_email_support: \"Email Support\",\n    contact_live_chat: \"Live Chat\",\n    contact_phone_support: \"Phone Support\",\n    contact_send_message: \"Send us a message\",\n    contact_name: \"Full Name\",\n    contact_category: \"Category\",\n    contact_subject: \"Subject\",\n    contact_message: \"Message\",\n    contact_send: \"Send Message\",\n    contact_sending: \"Sending message...\",\n    contact_faq: \"Frequently Asked Questions\",\n    \n    // Categories\n    category_fitness: \"Fitness\",\n    category_learning: \"Learning\",\n    category_career: \"Career\",\n    category_personal: \"Personal\",\n  },\n  \n  fa: {\n    // Common\n    app_name: \"برنامه زندگی\",\n    welcome: \"خوش آمدید\",\n    loading: \"در حال بارگذاری...\",\n    success: \"موفق!\",\n    error: \"خطا\",\n    save: \"ذخیره\",\n    cancel: \"لغو\",\n    edit: \"ویرایش\",\n    delete: \"حذف\",\n    close: \"بستن\",\n    next: \"بعدی\",\n    previous: \"قبلی\",\n    complete: \"تکمیل\",\n    \n    // Navigation\n    nav_dashboard: \"داشبورد\",\n    nav_monthly: \"برنامه ماهانه\",\n    nav_progress: \"پیشرفت\",\n    nav_goals: \"اهداف\",\n    nav_contact: \"تماس با ما\",\n    nav_settings: \"تنظیمات\",\n    \n    // Auth\n    auth_title: \"برنامه زندگی\",\n    auth_description: \"روتین روزانه خود را با برنامه‌ریزی هوش مصنوعی تغییر دهید\",\n    auth_login: \"ورود\",\n    auth_register: \"ثبت نام\",\n    auth_email: \"ایمیل\",\n    auth_password: \"رمز عبور\",\n    auth_name: \"نام کامل\",\n    auth_signin: \"ورود\",\n    auth_create_account: \"ایجاد حساب\",\n    auth_signing_in: \"در حال ورود...\",\n    auth_creating_account: \"در حال ایجاد حساب...\",\n    \n    // Profile Setup\n    profile_title: \"تکمیل پروفایل\",\n    profile_description: \"کمک کنید تا برنامه شخصی‌سازی شده زندگی شما را با توصیه‌های هوش مصنوعی بسازیم\",\n    profile_step_of: \"مرحله {current} از {total}\",\n    profile_work_study: \"وضعیت کاری یا تحصیلی فعلی شما چیست؟\",\n    profile_work_study_placeholder: \"مثلاً، مهندس نرم‌افزار در شرکت فناوری، دانشجوی علوم کامپیوتر، طراح آزاد...\",\n    profile_hobbies: \"سرگرمی‌ها و علایق\",\n    profile_hobbies_placeholder: \"مثلاً، مطالعه، عکاسی، آشپزی، بازی، تولید موسیقی...\",\n    profile_sports: \"ورزش‌ها و تمرینات مورد علاقه\",\n    profile_sports_placeholder: \"مثلاً، دویدن، یوگا، وزنه‌برداری، شنا، بسکتبال...\",\n    profile_location: \"کجا زندگی می‌کنید؟\",\n    profile_location_placeholder: \"مثلاً، تهران، ایران یا نیویورک، آمریکا\",\n    profile_age: \"سن\",\n    profile_weight: \"وزن (کیلوگرم)\",\n    profile_height: \"قد (سانتی‌متر)\",\n    profile_reading: \"چه چیزی دوست دارید بخوانید؟\",\n    profile_reading_placeholder: \"اگر می‌خواهید هوش مصنوعی کتاب پیشنهاد دهد خالی بگذارید، یا ژانرها، نویسندگان یا کتاب‌های مورد علاقه خود را بگویید...\",\n    profile_ai_tip: \"💡 نگران نباشید اگر مطمئن نیستید چه بخوانید - هوش مصنوعی ما بر اساس علایق و اهداف شما کتاب پیشنهاد خواهد داد!\",\n    profile_complete: \"تکمیل راه‌اندازی\",\n    profile_creating: \"در حال ایجاد برنامه شما...\",\n    \n    // Dashboard\n    dashboard_good_morning: \"صبح بخیر! 👋\",\n    dashboard_progress: \"پیشرفت امروز\",\n    dashboard_tasks_completed: \"{completed} از {total} کار انجام شده\",\n    dashboard_tasks_remaining: \"{remaining} کار باقی مانده\",\n    dashboard_ai_recommendation: \"توصیه هوش مصنوعی\",\n    dashboard_ai_suggestion: \"بر اساس سطح انرژی شما، انتقال جلسه مطالعه به بعد از ناهار برای تمرکز بهتر را در نظر بگیرید. تکمیل تمرینات شما ثبات عالی را نشان می‌دهد!\",\n    dashboard_edit_schedule: \"ویرایش برنامه\",\n    \n    // Tasks\n    task_workout: \"تمرین\",\n    task_meal: \"غذا\",\n    task_reading: \"مطالعه\",\n    task_work: \"کار\",\n    task_rest: \"استراحت\",\n    task_morning_workout: \"تمرین صبحگاهی\",\n    task_healthy_breakfast: \"صبحانه سالم\",\n    task_deep_work: \"جلسه کار عمیق\",\n    task_reading_time: \"زمان مطالعه\",\n    task_lunch_break: \"استراحت ناهار\",\n    task_afternoon_work: \"کار بعدازظهر\",\n    task_rest_reflection: \"استراحت و تأمل\",\n    \n    // Monthly Planner\n    monthly_title: \"نمای کلی ماهانه\",\n    monthly_description: \"برنامه‌ریزی و اهداف {month}\",\n    monthly_ai_vision: \"چشم‌انداز هوش مصنوعی\",\n    monthly_projection_6: \"با سرعت فعلی شما، امسال 24 کتاب تمام خواهید کرد، رکورد شخصی 5 کیلومتری به دست خواهید آورد، و 3 فریمورک برنامه‌نویسی جدید تسلط خواهید یافت. ثبات در روتین صبحگاهی نقطه قوت شماست.\",\n    monthly_projection_12: \"با حفظ این عادات، تخصص در توسعه فول‌استک کسب خواهید کرد، ماراتن تمام خواهید کرد، و خود را به عنوان رهبر دانش در زمینه خود معرفی خواهید کرد.\",\n    monthly_goals: \"اهداف ماهانه\",\n    monthly_milestones: \"نقاط عطف کلیدی\",\n    monthly_track_progress: \"پیشرفت خود را این ماه دنبال کنید\",\n    \n    // Progress\n    progress_title: \"پیگیری پیشرفت\",\n    progress_description: \"سفر خود را تجسم کنید و دستاوردها را جشن بگیرید\",\n    progress_this_week: \"این هفته\",\n    progress_this_month: \"این ماه\",\n    progress_goals_met: \"اهداف تحقق‌یافته\",\n    progress_achievements: \"دستاوردها\",\n    progress_weekly_view: \"نمای هفتگی\",\n    progress_monthly_trends: \"روندهای ماهانه\",\n    progress_category_breakdown: \"تفکیک دسته‌بندی\",\n    progress_task_completion: \"تکمیل کارهای هفتگی\",\n    progress_trends: \"عملکرد در حوزه‌های مختلف زندگی\",\n    progress_time_distribution: \"نحوه صرف زمان برنامه‌ریزی شده\",\n    progress_recent_achievements: \"آخرین نقاط عطف شما\",\n    \n    // Contact\n    contact_title: \"تماس با ما\",\n    contact_description: \"سوال، بازخورد دارید یا به پشتیبانی نیاز دارید؟ ما اینجا هستیم تا کمک کنیم بیشترین استفاده را از تجربه برنامه زندگی خود داشته باشید.\",\n    contact_email_support: \"پشتیبانی ایمیل\",\n    contact_live_chat: \"گفتگوی زنده\",\n    contact_phone_support: \"پشتیبانی تلفنی\",\n    contact_send_message: \"پیام بفرستید\",\n    contact_name: \"نام کامل\",\n    contact_category: \"دسته‌بندی\",\n    contact_subject: \"موضوع\",\n    contact_message: \"پیام\",\n    contact_send: \"ارسال پیام\",\n    contact_sending: \"در حال ارسال پیام...\",\n    contact_faq: \"سوالات متداول\",\n    \n    // Categories\n    category_fitness: \"تناسب اندام\",\n    category_learning: \"یادگیری\",\n    category_career: \"شغل\",\n    category_personal: \"شخصی\",\n  }\n}","size_bytes":15796},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"server/services/ai/buildAIContext.ts":{"content":"import { type Profile } from \"@shared/schema\";\n\nexport function buildAIContext(profile: Profile): string {\n  const parts: string[] = [];\n  \n  // Basic info\n  parts.push(`User Profile:`);\n  parts.push(`- Work/Study: ${profile.workStudy}`);\n  parts.push(`- Hobbies: ${profile.hobbies}`);\n  parts.push(`- Sports/Exercise: ${profile.sports}`);\n  parts.push(`- Location: ${profile.location}`);\n  \n  // Physical stats (if available)\n  if (profile.ageYears) {\n    parts.push(`- Age: ${profile.ageYears} years`);\n  }\n  if (profile.weightKg && profile.heightCm) {\n    parts.push(`- Physical: ${profile.weightKg}kg, ${profile.heightCm}cm`);\n  }\n  \n  // Reading preferences\n  if (profile.reading && profile.reading.trim()) {\n    parts.push(`- Reading: ${profile.reading}`);\n  } else {\n    parts.push(`- Reading: Open to AI recommendations based on interests`);\n  }\n  \n  return parts.join('\\n');\n}\n","size_bytes":886},"server/services/ai/generateDailyPlan.ts":{"content":"import axios from 'axios';\nimport { type Profile } from \"@shared/schema\";\nimport { buildAIContext } from './buildAIContext';\n\nexport type DailyPlanItem = {\n  start: string;\n  end: string;\n  title: string;\n  type: 'work' | 'study' | 'exercise' | 'meal' | 'reading' | 'break' | 'sleep' | 'other';\n  priority?: 'low' | 'medium' | 'high';\n  notes?: string;\n};\n\nexport type DailyPlan = {\n  date: string;\n  timezone: string;\n  items: DailyPlanItem[];\n};\n\nexport async function generateDailyPlan({ \n  profile, \n  date, \n  timezone \n}: { \n  profile: Profile; \n  date: string; \n  timezone: string; \n}): Promise<DailyPlan> {\n  // If no API key, return deterministic sample plan\n  if (!process.env.DEEPSEEK_API_KEY) {\n    return generateSamplePlan(date, timezone, profile);\n  }\n\n  try {\n    const aiContext = buildAIContext(profile);\n    \n    const systemPrompt = `${aiContext}\n\nYou are a personal productivity AI that creates daily schedules. Generate a realistic daily plan as JSON only (no markdown, no code fences).\n\nRequired JSON schema:\n{\n  \"date\": \"YYYY-MM-DD\",\n  \"timezone\": \"string\",\n  \"items\": [\n    {\n      \"start\": \"HH:MM\",\n      \"end\": \"HH:MM\", \n      \"title\": \"string\",\n      \"type\": \"work|study|exercise|meal|reading|break|sleep|other\",\n      \"priority\": \"low|medium|high\",\n      \"notes\": \"string (optional)\"\n    }\n  ]\n}\n\nGuidelines:\n- Create 8-12 realistic time blocks\n- Include work/study based on their profile\n- Add exercise based on their sports preferences\n- Include meals, breaks, and sleep\n- Add reading time if they have reading preferences\n- Use realistic time slots (e.g., 08:00-09:00)\n- Consider their location and typical daily patterns\n- Make it practical and achievable`;\n\n    const userPrompt = `Create a daily plan for ${date} in timezone ${timezone}. Consider the user's work/study situation, hobbies, and preferences. Make it realistic and balanced.`;\n\n    const response = await axios.post('https://api.deepseek.com/v1/chat/completions', {\n      model: 'deepseek-v3',\n      temperature: 0.6,\n      max_tokens: 1200,\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: userPrompt }\n      ]\n    }, {\n      headers: {\n        'Authorization': `Bearer ${process.env.DEEPSEEK_API_KEY}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (!response.data.choices?.[0]?.message?.content) {\n      throw new Error('No content in DeepSeek response');\n    }\n\n    let content = response.data.choices[0].message.content;\n    \n    // Remove code fences if present\n    if (content.includes('```')) {\n      content = content.replace(/```json\\n?/g, '').replace(/```\\n?/g, '');\n    }\n\n    const plan = JSON.parse(content) as DailyPlan;\n    \n    // Validate the plan structure\n    if (!plan.date || !plan.timezone || !Array.isArray(plan.items)) {\n      throw new Error('Invalid plan structure from AI');\n    }\n\n    return plan;\n\n  } catch (error) {\n    console.error('DeepSeek API error:', error);\n    \n    // Fallback to sample plan on API error\n    return generateSamplePlan(date, timezone, profile);\n  }\n}\n\nfunction generateSamplePlan(date: string, timezone: string, profile: Profile): DailyPlan {\n  // Generate a deterministic sample plan based on profile and date\n  const baseItems: DailyPlanItem[] = [\n    { start: '07:00', end: '07:30', title: 'Morning routine', type: 'other', priority: 'medium' },\n    { start: '07:30', end: '08:00', title: 'Breakfast', type: 'meal', priority: 'high' },\n    { start: '08:00', end: '12:00', title: 'Work/Study time', type: 'work', priority: 'high' },\n    { start: '12:00', end: '13:00', title: 'Lunch break', type: 'meal', priority: 'high' },\n    { start: '13:00', end: '17:00', title: 'Work/Study time', type: 'work', priority: 'high' },\n    { start: '17:00', end: '18:00', title: 'Exercise', type: 'exercise', priority: 'medium' },\n    { start: '18:00', end: '19:00', title: 'Personal time', type: 'break', priority: 'low' },\n    { start: '19:00', end: '20:00', title: 'Dinner', type: 'meal', priority: 'high' },\n    { start: '20:00', end: '21:00', title: 'Reading/Hobbies', type: 'reading', priority: 'low' },\n    { start: '21:00', end: '22:00', title: 'Wind down', type: 'break', priority: 'low' },\n    { start: '22:00', end: '07:00', title: 'Sleep', type: 'sleep', priority: 'high' }\n  ];\n\n  // Customize based on profile\n  if (profile.sports && profile.sports.toLowerCase().includes('yoga')) {\n    baseItems[5] = { start: '17:00', end: '18:00', title: 'Yoga session', type: 'exercise', priority: 'medium' };\n  }\n  \n  if (profile.reading && profile.reading.trim()) {\n    baseItems[8] = { start: '20:00', end: '21:00', title: 'Reading time', type: 'reading', priority: 'medium' };\n  }\n\n  return {\n    date,\n    timezone,\n    items: baseItems\n  };\n}\n","size_bytes":4766},"client/src/components/examples/AppSidebar.tsx":{"content":"import { AppSidebar } from '../AppSidebar'\nimport { SidebarProvider } from \"@/components/ui/sidebar\"\n\nexport default function AppSidebarExample() {\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex-1 p-6\">\n          <h2 className=\"text-xl font-semibold\">Main Content Area</h2>\n          <p className=\"text-muted-foreground\">This is where the main content would be displayed</p>\n        </div>\n      </div>\n    </SidebarProvider>\n  )\n}","size_bytes":643},"client/src/components/examples/AuthForm.tsx":{"content":"import { AuthForm } from '../AuthForm'\n\nexport default function AuthFormExample() {\n  return (\n    <AuthForm onAuthSuccess={() => console.log('Auth success triggered')} />\n  )\n}","size_bytes":177},"client/src/components/examples/ContactForm.tsx":{"content":"import { ContactForm } from '../ContactForm'\n\nexport default function ContactFormExample() {\n  return (\n    <div className=\"p-6 max-w-6xl\">\n      <ContactForm />\n    </div>\n  )\n}","size_bytes":178},"client/src/components/examples/DailyDashboard.tsx":{"content":"import { DailyDashboard } from '../DailyDashboard'\n\nexport default function DailyDashboardExample() {\n  return (\n    <div className=\"p-6 max-w-4xl\">\n      <DailyDashboard />\n    </div>\n  )\n}","size_bytes":190},"client/src/components/examples/LanguageToggle.tsx":{"content":"import { LanguageToggle } from '../LanguageToggle'\nimport { LanguageProvider } from '@/contexts/LanguageContext'\n\nexport default function LanguageToggleExample() {\n  return (\n    <LanguageProvider>\n      <div className=\"p-4 space-y-4\">\n        <h2 className=\"text-xl font-semibold\">Language Toggle</h2>\n        <LanguageToggle />\n        <p className=\"text-muted-foreground\">Click the language button to switch between English and Persian</p>\n      </div>\n    </LanguageProvider>\n  )\n}","size_bytes":485},"client/src/components/examples/MonthlyPlanner.tsx":{"content":"import { MonthlyPlanner } from '../MonthlyPlanner'\n\nexport default function MonthlyPlannerExample() {\n  return (\n    <div className=\"p-6 max-w-6xl\">\n      <MonthlyPlanner />\n    </div>\n  )\n}","size_bytes":190},"client/src/components/examples/ProfileSetup.tsx":{"content":"import { ProfileSetup } from '../ProfileSetup'\n\nexport default function ProfileSetupExample() {\n  return (\n    <ProfileSetup onComplete={() => console.log('Profile setup completed')} />\n  )\n}","size_bytes":191},"client/src/components/examples/ProgressTracking.tsx":{"content":"import { ProgressTracking } from '../ProgressTracking'\n\nexport default function ProgressTrackingExample() {\n  return (\n    <div className=\"p-6 max-w-6xl\">\n      <ProgressTracking />\n    </div>\n  )\n}","size_bytes":198},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeToggle } from '../ThemeToggle'\nimport { ThemeProvider } from '../ThemeProvider'\n\nexport default function ThemeToggleExample() {\n  return (\n    <ThemeProvider>\n      <div className=\"p-4\">\n        <ThemeToggle />\n      </div>\n    </ThemeProvider>\n  )\n}","size_bytes":264},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}